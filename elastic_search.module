<?php

	require_once '/data/www/html/hardwoods_dev_ming/htdocs/sites/all/modules/DRUPAL_ELASTIC_SEARCH/vendor/autoload.php';
	require_once 'api/elastic_search.api.php';
//	require_once '/data/www/html/hardwoods_dev_ming/htdocs/sites/all/modules/custom/elastic_indexing/elastic_indexing.inc';

set_time_limit(0);

/**
 * Implementation of hook_menu().
 */
function elastic_search_menu(){
	$pre = 'admin/config/search/elastic_search';
	$items[$pre] = array(
		'title' => 'Elastic search',
		'description' => 'Configure elastic indexing and build search interface',
		'page callback' => 'drupal_goto',
		'page arguments' => array($pre . '/indexing'),
		'access callback' => 'user_access',
		'access arguments' => array('administer users'),
	);


    $items[$pre.'/indexing'] = array(
        'title' => t('Indexing'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('elastic_indexing_form'),
        'access callback' => 'user_access',
        'access arguments' => array('administer users'),
        'type' => MENU_LOCAL_TASK,
		'file' => 'includes/elastic_indexing_form.inc',
		'weight' => 0,
    );

	$items[$pre.'/search'] = array(
		'title' => t('Build search block'),
		'page callback' => '_elastic_search_block_build',
        'access callback' => 'user_access',
        'access arguments' => array('administer users'),
		'type' => MENU_LOCAL_TASK,
		'file' => 'includes/elastic_search_form.inc',
		'weight' => 1,
	);

    $items[$pre.'/search_blocks'] = array(
        'title' => t('Elastic search blocks'),
		'page callback' => '_elastic_search_blocks',
        //'page callback' => 'drupal_get_form',
        //'page arguments' => array('elastic_search_blocks_form'),
        'access callback' => 'user_access',
        'access arguments' => array('administer users'),
        'type' => MENU_LOCAL_TASK,
        'file' => 'includes/elastic_search_blocks_form.inc',
        'weight' => 2,
    );

    $items['elastic_search'] = array(
        'title' => '',
        'page callback' => '_elastic_search_interface_form',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
        'file' => 'includes/elastic_search_blocks_form.inc',
    );

	$items['elastic_search/search_results'] = array(
		'title' => t('Elasticsearch results'),
		'page callback' => '_elastic_search_results',
		'access callback' => TRUE, // 'user_access',
	//	'access arguments' => array('administer users'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'includes/_elastic_search_results.inc',
	);


	return $items;
}


/** page callback to return elastic_search_block_build form **/
function _elastic_search_block_build(){
	return drupal_get_form('elastic_search_block_build_form');
}

/** page callback to return elastic_search_blocks form. **/
function _elastic_search_blocks(){
	$elastic_search_blocks = variable_get('elastic_search_blocks');
	$output = drupal_get_form('elastic_search_blocks_form', $elastic_search_blocks);

	return $output;
}


/** page callback to return elastic_search_interface_form. **/
function _elastic_search_interface_form(){
	$elastic_search_interface = variable_get('elastic_search_blocks');
	$output = drupal_get_form('elastic_search_interface_form', $elastic_search_interface);
	$output = render($output);

	return $output;
}


/**
 * Implements hook_block_info().
 */
function elastic_search_block_info(){
    $blocks['elastic_results_transcripts'] = array(
        'info' => t('Elastic search results for transcript data'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => 'elastic_search',
        'cache' => DRUPAL_NO_CACHE,
    );
    return $blocks;
}


/**
 * Implements hook_block_view().
 */
function elastic_search_block_view($delta = ''){
    switch($delta){
        case 'elastic_results_transcripts':
            $block['subject'] = '';//t('Elastic search results');
            $block['content'] = _elastic_search_results();
        break;
    }

    return $block;
}


function _elastic_search_results(){

	$output = '';
    //get the first element of an array
    //get headers with clicking sorting
	if(!empty($_SESSION['search_output_table'])){
	    $elements = array_chunk($_SESSION['search_output_table'], 1, 1);
	    foreach($elements[0] as $value){
	        foreach(array_keys($value) as $field){
	            $header[] = array('data'=> $field, 'field'=>$field);
	        }
	    }


	//++++++++++++++++++++++CURRENTLY WORKING+++++++++++++++++++++++
	    // implementation of sort by clicking
	    $sorted_output = $_SESSION['search_output_table']; // default is unsorted
	    if(isset($_GET['sort']) && isset($_GET['order'])){
	        $sorted_output = sort_2d_array_by_value($_SESSION['search_output_table'], $_GET['order'], $_GET['sort']);
	    }
	//+++++++++++++++++++++CURRENTLY WORKING++++++++++++++++++++++++++
	
	
	
	    foreach($sorted_output as $values){
	//      $header[] = array_keys($values);
			if(!empty($values['uniquename'])){ // add a link to each feature unique name.
	        	$values['uniquename'] = l($values['uniquename'], 'feature/'.$values['uniquename']); // add link to feature uniquename.
			}
	        $rows[] = array_values($values);
	    }
	
	    $per_page = 10;
	    // Initialize the pager
	    $current_page = pager_default_initialize(count($rows), $per_page);
	    // Split your list into page sized chunks
	    $chunks = array_chunk($rows, $per_page, TRUE);
	    // Show the appropriate items from the list 
	    $output .= theme('table', array('header' => $header, 'rows' => $chunks[$current_page] ));
	    $output .= theme('pager', array('quantity', count($rows)));

	}


    return $output;

}//



/** implements hook_theme() **/
// set custom tpl for the elastic_search_interface_form //
function elastic_search_theme(){
	return array(
		'elastic_search_interface_form' => array(
			'render element' => 'form',
			'path' => drupal_get_path('module', 'elastic_search') . '/templates',
			'template' => 'elastic-search-interface',
		),
	);
}

//** implements hook_preprocess_elastic_search_interface_form(). **//
function elastic_search_preprocess_elastic_search_interface_form(&$variables){
	// shorten the form variable name for easier access.
	$form = $variables['form'];

/**
	foreach($form as $block_name=>$block_items){
		foreach(array_keys($block_items) as $block_item){
			$variables['elastic_search_block'][$block_items][$block_item] = render($form[$block_items][$block_item]);
		}
	}
**/

	// change labels for the form elements.
	$form['Search_transcripts']['search_transcripts_all|abbreviation']['#title'] 	= 	t('Organism');
	$form['Search_transcripts']['search_transcripts_all|hit_best_eval']['#title'] 	= 	t('Blast hit evalue');
	$form['Search_transcripts']['search_transcripts_all|hit_best_score']['#title'] 	= 	t('Blast hit score');
	$form['Search_transcripts']['search_transcripts_all|hit_description']['#title'] = 	t('Blast hit description');
	$form['Search_transcripts']['search_transcripts_all|seqlen']['#title'] 			= 	t('Sequence length');
	$form['Search_transcripts']['search_transcripts_all|type']['#title'] 			= 	t('Sequence type');
	$form['Search_transcripts']['search_transcripts_all|uniquename']['#title'] 		= 	t('Unique name');
	$form['Search_transcripts']['submit']['#value'] = t('Elasticsearch');

	// create variables for individual elements.
	$variables['organism'] = render($form['Search_transcripts']['search_transcripts_all|abbreviation']);
	$variables['blast_hit_eval'] = render($form['Search_transcripts']['search_transcripts_all|hit_best_eval']);
	$variables['blast_hit_score'] = render($form['Search_transcripts']['search_transcripts_all|hit_best_score']);
	$variables['blast_hit_description'] = render($form['Search_transcripts']['search_transcripts_all|hit_description']);
	$variables['seqlen'] = render($form['Search_transcripts']['search_transcripts_all|seqlen']);
	$variables['seqtype'] = render($form['Search_transcripts']['search_transcripts_all|type']);
	$variables['uniquename'] = render($form['Search_transcripts']['search_transcripts_all|uniquename']);

	$variables['submit'] = render($form['Search_transcripts']['submit']);

	$search_record_count = variable_get('search_record_count');
	if(!empty($search_record_count)){
		$variables['from_nth_entry_nth'] = render($form['from_nth_entry']['nth']);
		$variables['from_nth_entry_submit'] = render($form['from_nth_entry']['submit']);
	} else {
		$variables['from_nth_entry'] = NULL;
	}

	// obtain search records count.
	$count_arr = variable_get('search_record_count');
	$variables['search_record_count'] = $count_arr['count'];

	// be sure to print the remaining rendered form items.
	$variables['children'] = drupal_render_children($form);

}


/** _from_nth_entry form ajax callback **/
function _from_nth_entry_ajax($form, &$form_state){
	variable_set('nth_entry', $form_state['values']['nth']);
	return $form['from_nth_entry']['nth'];
}

function _from_nth_entry_submit($form, &$form_state){
	$form_state['values'] = variable_get('form_state_values');


    // The name of search block being submitted
    $block_name = substr($form_state['values']['op'], strlen('Elasticsearch|'));
    // get field and corresponding input keywords
    foreach($form_state['values'][$block_name] as $field=>$keyword){
        if($field != 'submit'){
            $table_field_mix[$field] = $keyword;
        }
    }
    // group fields by table in case that there are more than one table involved in this search block
    foreach($table_field_mix as $table_field=>$keyword){
        $table_field_arr = explode('|', $table_field);
        $table = $table_field_arr[0];
        $field = $table_field_arr[1];
        $table_field_comb_arr[$table][$field] = $keyword;
    }


    //--------------------run elastic search----------------------------------
    // Build query statement, just need to replace some of this query string
    // with the input form data
    $body_header =  '{"query" : {"bool" : {"must" : [';
    $query_sentence = '{"query_string" : {"default_field": "_field_", "query": "_keyword_"}},';
    $body_end = ']}}}';


    foreach($table_field_comb_arr as $table=>$fields){
        // replace the query string with corresponding data (query method, field name, keywords) 
        $output = '';
        foreach($fields as $field=>$keyword){
            $search = array("_field_", "_keyword_");
            $replace = array($field, $keyword);
            // Don't insert query sentences when keyword is empty
            if(!empty($keyword)){
                $replaced_query_sentence = str_replace($search, $replace, $query_sentence);
                $output .= $replaced_query_sentence;
            }

        }
        $output = rtrim($output, ',');
        $params['index'] = $table;
        //$params['index'] = 'hardwoodgenomics';
        $params['type'] = $table;
        $params['size'] = 100;
		$nth_entry = variable_get('nth_entry');
       	$params['from'] = $nth_entry;
dpm($nth_entry);
        //$params['from']   = 5125630;
        $params['body'] = $body_header.$output.$body_end;
        // store $params for __from_nth_entry_submit() callback
        $_SESSION['params'] = $params;
        //===run elasticsearch================  
        //++++++++++++++++++++++++++++++++++++
        $client = new Elasticsearch\Client();
        $search_result = $client->search($params);

       
        //elastic search return results with all fields from a document
        //but we only need to display fields we need
        $primary_key = get_primary_key($table);
        foreach($search_result['hits']['hits'] as $key=>$value){
            foreach($table_field_mix as $table_field=>$keyword){
                $table_field_arr = explode('|', $table_field);
                if($table == $table_field_arr[0]){
                    $field = $table_field_arr[1];
                    $elastic_output[$table][$key][$field] = $value['_source'][$field];
                    //$elastic_output[$table][$key][$primary_key] = $value['_source'][$primary_key];
                }
            }
        }
    }//------------------end of elastic search-------------------------------------


    // unset search_output_table session if it have already existed.
    if(!empty($_SESSION['search_output_table'])){
        unset($_SESSION['search_output_table']);
    }
    // display results only when elastic search results is not empty.
    if(!empty($value['_source'])){ //count how many tables involved.
        if(count($elastic_output, 0) == 1){
            $_SESSION['search_output_table'] = $elastic_output[$table];
        }
    }
    else{
        $_SESSION['search_output_table'][] = array('Oops!' => 'No records found.');
    }

}


/**
 * implement hook_cron().
 */
function elastic_search_cron() {
	// Default to an hourly interval. Of course, cron has to be running at least
	// hourly for this to work.
	$interval = variable_get('elastic_indexing_interval', 60);
	// We usually don't want to act every time cron runs (which could be every
	// minute) so keep a time for the next run in a variable.
	if (time() >= variable_get('elastic_indexing_next_execution', 0)) {
    	// This is a silly example of a cron job.
    	// It just makes it obvious that the job has run without
    	// making any changes to your database.
		if(drupal_cron_run()){
    		watchdog('Elastic indexing', 'Elastic indexing cron ran successfully');
    		if (TRUE) {
      			drupal_set_message(t('cron_example executed at %time', array('%time' => date_iso8601(time(0)))));
    		}
    		variable_set('elastic_indexing_next_execution', time() + $interval);
		}
  	}
}





/**
 * implement hook_cron_queue_info()
 */
function elastic_search_cron_queue_info(){
	$queues['elastic_queue'] = array(
		'worker callback' => 'elasticindexing_queue_item',
		'time' => 60 * 60 * 2,	## the amount of time drupal spends on calling the worker function. 
	);

	return $queues;
}



function elasticindexing_queue_item($item){

	$client = new Elasticsearch\Client();
	//$params['index'] = 'hardwoodgenomics';
	$params['index'] = str_replace('chado.', '', $_SESSION['selected_table']);
	$params['type'] = str_replace('chado.', '', $_SESSION['selected_table']);
	$sql = $item->sql;
	$result = db_query($sql);
	foreach($result as $record){
		$doc = objectToArray($record);
		$params['body'] = $doc;
//		$client->index($params);
		$client->index($params);
	}

}


