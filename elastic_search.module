<?php

	require_once '/data/www/html/hardwoods_dev_ming/htdocs/sites/all/modules/DRUPAL_ELASTIC_SEARCH/vendor/autoload.php';
	require_once 'api/elastic_search.api.php';
//	require_once '/data/www/html/hardwoods_dev_ming/htdocs/sites/all/modules/custom/elastic_indexing/elastic_indexing.inc';


set_time_limit(0);

/**
 * Implementation of hook_menu().
 */
function elastic_search_menu(){

    $items['elastic_indexing'] = array(
        'title' => t('Elastic Indexing'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('elastic_indexing_form'),
        'access callback' => 'user_access',
        'access arguments' => array('administer users'),
        'type' => MENU_NORMAL_ITEM,
		'file' => 'includes/elastic_indexing_form.inc',
    );

	$items['elastic_search'] = array(
		'title' => t('Elastic Search'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('elastic_search_form'),
		'access callback' => TRUE,
		'type' => MENU_NORMAL_ITEM,
		'file' => 'includes/elastic_search_form.inc',
	);

	$items['elastic_search/search_results'] = array(
		'title' => t('Elasticsearch results'),
		'page callback' => '_elastic_search_results',
		'access callback' => TRUE, // 'user_access',
	//	'access arguments' => array('administer users'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'includes/_elastic_search_results.inc',
	);


	return $items;
}







//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//
//================================ Theme functions ==============================

/**
 * Implements hook_theme().
 */
function elastic_search_theme(){
    return array(
        'elastic_search_form' => array(
            'render element' => 'form',
            'template' => 'elastic-search-form',
        ),
    );
}



/**
 * Assign the elements of the form to variables so
 * the themer can use those values to control how the form elements
 * are displayed.
 */

function template_preprocess_elastic_search_form(&$variables){
    // Create an empty array to hold elements that will be collected.
    $variables['elastic_search_form'] = array();
    // Create an empty array to store hidden elements that will be collected.
    $hidden = array();

    // Provide variables named after form keys so themers can print each element
    // independently.
    foreach(element_children($variables['form']) as $key){

        // For some reason I don't know, one form element doesn't have '#type'
        // so I have to write a conditional statement to get the $type variable.
        if(!empty($variables['form'][$key]['#type'])){
            $type = $variables['form'][$key]['#type'];
        }

        if($type == 'hidden' || $type == 'token'){
            $hidden[] = drupal_render($variables['form'][$key]);
        }
        else{
            $variables['elastic_search_form'][$key] = drupal_render($variables['form'][$key]);
        }

        // Hidden form elements have no value to themers. No need for separation.
        $variables['elastic_search_form']['hidden'] = implode($hidden);
    }


}//========================= The end of theme functions ====================================
//++++++++++++++++++++++++++ The end of theme functions ++++++++++++++++++++++++++++++++++++




/**
 * Implements hook_theme().
 */
function elastic_indexing_theme(){
	return array(
		'elastic_indexing_form' => array(
			'render element' => 'form',
			'template' => 'elastic-indexing-form',
		),
	);
}



/**
 * Assign the elements of the form to variables so
 * the themer can use those values to control how the form elements
 * are displayed.
 */ 
function template_preprocess_elastic_indexing_form(&$variables){
	// Create an empty array to hold elements that will be gathered.
	$variables['elastic_indexing_form'] = array();
	// Create an empty array to store hidden elements that will be gathered.
	$hidden = array();
	
	// Provide variables named after form keys so themers can print each element
	// independently.
	foreach(element_children($variables['form']) as $key){
	
		// For some reason I don't know, one form element doesn't have '#type'
		// so I have to write a conditional statement to get the $type variable.
		if(!empty($variables['form'][$key]['#type'])){
			$type = $variables['form'][$key]['#type'];
		}

		if($type == 'hidden' || $type == 'token'){
			$hidden[] = drupal_render($variables['form'][$key]);
		}
		else{
			$variables['elastic_indexing_form'][$key] = drupal_render($variables['form'][$key]);
		}

		// Hidden form elements have no value to themers. No need for separation.
		$variables['elastic_indexing_form']['hidden'] = implode($hidden);
	}


}



/**
 * implement hok_cron().
 */
function elastic_search_cron() {
	// Default to an hourly interval. Of course, cron has to be running at least
	// hourly for this to work.
	$interval = variable_get('elastic_indexing_interval', 60);
	// We usually don't want to act every time cron runs (which could be every
	// minute) so keep a time for the next run in a variable.
	if (time() >= variable_get('elastic_indexing_next_execution', 0)) {
    	// This is a silly example of a cron job.
    	// It just makes it obvious that the job has run without
    	// making any changes to your database.
		if(drupal_cron_run()){
    		watchdog('Elastic indexing', 'Elastic indexing cron ran successfully');
    		if (TRUE) {
      			drupal_set_message(t('cron_example executed at %time', array('%time' => date_iso8601(time(0)))));
    		}
    		variable_set('elastic_indexing_next_execution', time() + $interval);
		}
  	}
}





/**
 * implement hook_cron_queue_info()
 */
function elastic_search_cron_queue_info(){
	$queues['elastic_queue'] = array(
		'worker callback' => 'elasticindexing_queue_item',
		//'time' => 120,	## the time (in second) a single cron batch will run. 
	);

	return $queues;
}



function elasticindexing_queue_item($item){

	$client = new Elasticsearch\Client();
	$params['index'] = str_replace('chado.', '', $_SESSION['selected_table']);
	$params['type'] = $params['index'];
	$sql = $item->sql;
	$result = db_query($sql);
	foreach($result as $record){
		$doc = objectToArray($record);
		$params['body'] = $doc;
//		$client->index($params);
		$client->index($params);
	}

}






//unset($_SESSION['all_selected_fields']);
//unset($_SESSION['query']);
//unset($_SESSION['keywords']);
//unset($_SESSION['common_field']);
//unset($_SESSION['search_output_table']);
unset($params);






