<?php

	require_once '/data/www/html/hardwoods_dev_ming/htdocs/sites/all/modules/DRUPAL_ELASTIC_SEARCH/vendor/autoload.php';

set_time_limit(0);

/**
 * Implementation of hook_menu().
 */
function elastic_search_menu(){
	$items['elastic_search'] = array(
		'title' => t('Elastic Search'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('elastic_search_form'),
		'access callback' => 'user_access',
		'access arguments' => array('administer users'),
		'type' => MENU_NORMAL_ITEM,
	);

	$items['elastic_search/search_results'] = array(
		'title' => t('Elasticsearch results'),
		'page callback' => '_elastic_search_results',
		'access callback' => 'user_access',
		'access arguments' => array('administer users'),
		'type' => MENU_NORMAL_ITEM,
	);


	return $items;
}



/**
 * Generate the search form.
 */
function elastic_search_form($form, &$form_state) {

    //=====Create a table to display indexed tables and their fields===========
    $rows = array();
    $header = array('Indexed table', 'Indexed fields');
    // You have to create a new $client to get access to the elasticsearch
    $client = new Elasticsearch\Client();
    $mappings = $client->indices()->getMapping();
    $indices = array_keys($mappings);
    foreach($indices as $index){
        $fields = array_keys($mappings[$index]['mappings'][$index]['properties']);
        if(!empty($fields)){
            $rows[] = array($index, implode(', ', $fields));
        //  $variables['elastic_indexing_form'][$index] = $fields;
        }
    }
    $variables['elastic_indexing_form']['table'] = theme('table', array('header' => $header, 'rows' => $rows ));
    $variables['elastic_indexing_form']['table'] .= theme('pager');
    //=========================================================================



	// A form field with type of checkbox so that users can select
	// which tables they want to search
	// $indices is an array consisting of all indexed tables
	$form['elastic_indexed'] = array(
		'#type' => 'fieldset',
		'#title' => t('Select tables for search'),
	);
	$form['elastic_indexed']['indexed_tables'] = array(
		'#type' => 'checkboxes',
		'#title' => t('Select tables that you want to search'),
		'#description' => t('You can select one single table or join multiple tables for searching.
			However, only relational tables can be joined.'),
		// indices are named by indexed table names
		'#options' => $indices,
		'#ajax' => array(
			'callback' => 'table_dependent_fields_callback',
			'wrapper' => 'fields_replace',
		),
	);

	// Form fieldsets to display indexed fields for searching.
	$form['elastic_search'] = array(
		'#type' => 'fieldset',
		'#title' => t('Select fields for searching'),
		'#prefix' => '<div id="fields_replace">',
		'#suffix' => '</div>',
	);


	// Create an array to store all selected fields
	$all_selected_fields = array();
	if(!empty($form_state['values']['indexed_tables'])){
    	foreach($form_state['values']['indexed_tables'] as $key){
    		// check if $key is an alphanumeric character.
    		if(ctype_alnum($key)){
    			$selected_table = $indices[$key];
    			// get list of fields for the selected table
    			$fields = array_keys($mappings[$selected_table]['mappings'][$selected_table]['properties']);
				// note that this form field is within a for loop.
				// It creates a form field for each table, with table fields as being displayed 
    			$form['elastic_search'][$selected_table] = array(
    				'#type' => 'checkboxes',
    				'#title' => t("$selected_table"),
    				'#options' => $fields,
    				'#ajax' => array(
    					'callback' => 'all_fields_callback',
    					'wrapper' => 'all_fields_replace'
    				),
    			);
    
				// Selected fields are stored as:
				/* $all_selected_fields = array{
							'table_1' => array('field_1', 'field_2', '...'),
							'table_2' => array('field_1', 'field_2', '...'),
					}
				*/
				// $form_state['values'][$selected_table] is an array of keys of
				// selected fields from table $selected_table
    			foreach($form_state['values'][$selected_table] as $key){
    				if(ctype_alnum($key)){
    					$all_selected_fields[$selected_table][] = $fields[$key];
    				}
    				
    			};			
    
    		}

			//======= Useful variable ==============
			//||    							  ||			
			//======================================
    		// Store selected table and fields
    		$form_state['all_selected_fields'] = $all_selected_fields;
    		//========================================================
    
    	}

	}

	




	// Build search box for all selected fields
	$form['all_selected_fields'] = array(
		'#type' => 'fieldset',
		'#title' => t('These are the fields that you have selected'),
		'#prefix' => '<div id="all_fields_replace">',
		'#suffix' => '</div>',
	);		


	// for loop through the first level of $all_selected_fields to
	// get the selected tables
	foreach($all_selected_fields as $table){
		// Second level of for loop gets the selected fields for a given selected table
		foreach($table as $field){
				// build search method form field for the corresponding table field
				$form['all_selected_fields']['query_'.$field] = array(
					'#type' => 'select',
					'#title' => 'Query: '.$field,
					'#options' => drupal_map_assoc(array(t('query_string'))),
					//'#options' => drupal_map_assoc(array(t('query_string'), t('match'), t('fuzzy'), t('Ascending'))),
				);
				// build keyword box for each table field
				$form['all_selected_fields'][$field] = array(
					'#type' => 'textfield',
					'#title' => $field,
				);
		}
	}


	$form['build_search_boxes'] = array(
		'#type' => 'submit',
		'#value' => 'Elasticsearch',
		'#submit' => array('get_form_values'),
	);	
	
	return $form;	
}




/**
 * AJAX callback function to generate all fields for a selected table
 */
function table_dependent_fields_callback($form, &$form_state){
	return $form['elastic_search'];
}


/**
 * AJAX callback function to generate searching box for selected fields
 */
function all_fields_callback($form, &$form_state){
	return $form['all_selected_fields'];
}


/**
 * Call the submit callback to get form values for search
 */
function get_form_values($form, &$form_state){

drupal_set_message('form has been submitted');

	// Get all the selected table and selected fields
	// remember that $form_state['all_selected_fields'] is a two level array:
	// first level contains the selected tables
	// second level contains the selected fields
	//================ Useful variable ===============================
	//||															||
	//================================================================
	$_SESSION['all_selected_fields'] = $form_state['all_selected_fields'];
	//===================================================================

	// Get query method and keywords for each field
	foreach($_SESSION['all_selected_fields'] as $table){
		foreach($table as $field){

			$query_name = 'query_'.$field;
			//============ Useful variable ====================================
			//||															 ||
			//=================================================================
			$_SESSION['query'][$query_name] = $form_state['values'][$query_name];
			//=================================================================

			//=========== Useful variable =====================================
			//||															 ||
			//=================================================================
			$_SESSION['keywords'][$field] = $form_state['values'][$field];   
			//=================================================================
		}
	}








	//====== AT THIS STAGE, WE HAVE ALL THE DATA WE NEED TO IMPLEMENT ELASTICSEARCH========
	//======	$_SESSION['all_selected_fields']	========== 	Field name
	//====== 	$_SESSION['query'][$query_name]		========== 	Query method
	//======	$_SESSION['keywords'][$field]		==========	Keywords
	//===+++++++++++++++++++++++++++++++++++++++++++++++===================================
	
	
	
	


	//==================== The start of elasticsearch =========================
	//++++++++++++++++++++ The start of elasticsearch +++++++++++++++++++++++++++
	
	// Build query statement, just need to replace some of this query string
	// with the input form data
	$body_header =  '{"query" : {"bool" : {"must" : [';
	$query_sentence = '{"query_string" : {"default_field": "_field_", "query": "_keyword_"}},';
	$body_end = ']}}}';
		
	
	//Find common field to join tables 
	if(!empty($_SESSION['all_selected_fields'])){
	
//	dpm($_SESSION['all_selected_fields']);
	    $all_selected_tables = array_keys($_SESSION['all_selected_fields']);
	
		// The following two lines are needed for retrieving all fields from selected table later
	    $client = new Elasticsearch\Client();
	    $mappings = $client->indices()->getMapping();
		//======================================================================================
	    
	    switch(count($all_selected_tables)){
	    	
			// When only one table is selected    
	    	case 1:
	
	
				$table_1 = $all_selected_tables[0];
	            $table_1_fields = array_keys($mappings[$table_1]['mappings'][$table_1]['properties']);
				//=====================================
				// Implement elasticsearch on $table_1
				//+++++++++++++++++++++++++++++++++++++	
		    	$params['index'] = $table_1 ;
				$params['type'] = $table_1;
				$params['size'] = 1000000;
	
				// replace the query string with corresponding data (query method, field name, keywords) 
		    	$output = '';
		    	foreach($_SESSION['all_selected_fields'][$table_1] as $field){
		    		$search = array("_field_", "_keyword_");
		    		$replace = array($field, $_SESSION['keywords'][$field]);
					// Don't insert query sentences when keyword is empty
					if(!empty($_SESSION['keywords'][$field])){
		    			$replaced_query_sentence = str_replace($search, $replace, $query_sentence);
		    			$output .= $replaced_query_sentence;
					}
	
				}
				$output = rtrim($output, ',');
	
				$params['body'] = $body_header.$output.$body_end;    
	
				// display 1000000 records
				$params['size'] = 1000000;
	
	
				//===run elasticsearch================	
				//++++++++++++++++++++++++++++++++++++
				$client = new Elasticsearch\Client();
				$elastic_table_1_results = $client->search($params);
	
	
	
				// remove unselected fields from search results		
				foreach($elastic_table_1_results['hits']['hits'] as $key=>$search_hit){
						foreach($_SESSION['all_selected_fields'][$table_1] as $field){
							$search_output_table_1[$key][$field] = $search_hit['_source'][$field]; 
						}
	//					$search_output_table_1[$key]['score'] = $search_hit['_score'];
				}
	
	
//				dpm($search_output_table_1);
				$_SESSION['search_output_table'] = $search_output_table_1;
	
	
	
	
	
	
									
				break;
	
	    	case 2:
	    		$table_1 = $all_selected_tables[0];
	    		$table_1_fields = array_keys($mappings[$table_1]['mappings'][$table_1]['properties']);
	    		$table_2 = $all_selected_tables[1];
	    		$table_2_fields = array_keys($mappings[$table_2]['mappings'][$table_2]['properties']);
				
				$common_field = array_intersect($table_1_fields, $table_2_fields);
				// $common_field is an array, but I need it to be a string
				$common_field = implode($common_field);
	
	
				if(!empty($common_field)){
	
					//=====================================
					// Implement elasticsearch on $table_1
					//+++++++++++++++++++++++++++++++++++++	
			    	$params['index'] = $table_1 ;
					$params['type'] = $table_1;
					$params['size'] = 1000000;
	
					// replace the query string with corresponding data (query method, field name, keywords) 
			    	$output = '';
			    	foreach($_SESSION['all_selected_fields'][$table_1] as $field){
			    		$search = array("_field_", "_keyword_");
			    		$replace = array($field, $_SESSION['keywords'][$field]);
						// Don't insert query sentences when keyword is empty
						if(!empty($_SESSION['keywords'][$field])){
			    			$replaced_query_sentence = str_replace($search, $replace, $query_sentence);
			    			$output .= $replaced_query_sentence;
						}
	
					}
					$output = rtrim($output, ',');
	
					$params['body'] = $body_header.$output.$body_end;    
	
					// display 1000000 records
					$params['size'] = 1000000;
	
	
					//===run elasticsearch================	
					//++++++++++++++++++++++++++++++++++++
					$client = new Elasticsearch\Client();
					$elastic_table_1_results = $client->search($params);
				
	
	
	
	
				
					//=====================================
					// Implement elasticsearch on $table_2
					//+++++++++++++++++++++++++++++++++++++	
			    	$params['index'] = $table_2 ;
					$params['type'] = $table_2;
					$params['size'] = 1000000;
	
					// replace the query string with corresponding data (query method, field name, keywords) 
			    	$output = '';
			    	foreach($_SESSION['all_selected_fields'][$table_2] as $field){
			    		$search = array("_field_", "_keyword_");
			    		$replace = array($field, $_SESSION['keywords'][$field]);
						// Don't insert query sentences when keyword is empty
						if(!empty($_SESSION['keywords'][$field])){
			    			$replaced_query_sentence = str_replace($search, $replace, $query_sentence);
			    			$output .= $replaced_query_sentence;
						}
	
					}
					$output = rtrim($output, ',');
	
					$params['body'] = $body_header.$output.$body_end;    
	
	
	
					//===run elasticsearch================	
					//++++++++++++++++++++++++++++++++++++
					$client = new Elasticsearch\Client();
					$elastic_table_2_results = $client->search($params);
	
	
				
					// Display the elasticsearch results
	//				dpm($elastic_table_1_results);
	//				dpm($elastic_table_2_results);
	
	
	
	
	
	
	
	
	
					// Add the $common_field to the list of selected fields for each table if it is not selected
					// Add to $table_1
					if(!in_array($common_field, $_SESSION['all_selected_fields'][$table_1])){
						$_SESSION['all_selected_fields'][$table_1][] = $common_field;
					}
					// remove unselected fields from search results
					foreach($elastic_table_1_results['hits']['hits'] as $key=>$search_hit){
							foreach($_SESSION['all_selected_fields'][$table_1] as $field){
								$search_output_table_1[$key][$field] = $search_hit['_source'][$field]; 
							}
							$search_output_table_1[$key]['score'] = $search_hit['_score'];
					}
					
	
	
	
	
	
	
	
					// Add to $table_2
					if(!in_array($common_field, $_SESSION['all_selected_fields'][$table_2])){
						$_SESSION['all_selected_fields'][$table_2][] = $common_field;
					}
					// remove unselected fields from search results
					foreach($elastic_table_2_results['hits']['hits'] as $key=>$search_hit){
							foreach($_SESSION['all_selected_fields'][$table_2] as $field){
								$search_output_table_2[$key][$field] = $search_hit['_source'][$field]; 
							}
							$search_output_table_2[$key]['score'] = $search_hit['_score'];
					}
		
//					dpm($search_output_table_1);
//					dpm($search_output_table_2);
	
					
				}
	

/*
				$inner_join_table = array();
				foreach($search_output_table_1 as $table_1){
					foreach($search_output_table_2 as $table_2){
						if($table_1[$common_field] == $table_2[$common_field]){
							$inner_join_table[] = array_merge($table_1, $table_2);
						}
					}
				}

//					dpm($inner_join_table);
				
			
				$_SESSION['search_output_table'] = $inner_join_table;	

*/


				//======= Binary search tree algorithm for inner join two tables ===========
				//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
				foreach($search_output_table_1 as $key => $value){
					unset($search_output_table_1[$key]);
					$new_key = 'key_'.$value[$common_field];
					$search_output_table_1[$new_key] = $value;
				}				

//				dpm(array_keys($search_output_table_1));


				$inner_join_table = array();



				foreach($search_output_table_2 as $value){
					$key = 'key_'.$value[$common_field];
					if(isset($search_output_table_1[$key])){
						$inner_join_table[] = array_merge($value, $search_output_table_1[$key]);
					}
				//	$inner_join_table[] = $search_output_table_1[$key];
				}				

				dpm($inner_join_table);


				$_SESSION['search_output_table'] = $inner_join_table;




				break;
	
	
	
		

            case 3:
                $table_1 = $all_selected_tables[0];
                $table_1_fields = array_keys($mappings[$table_1]['mappings'][$table_1]['properties']);
                $table_2 = $all_selected_tables[1];
                $table_2_fields = array_keys($mappings[$table_2]['mappings'][$table_2]['properties']);

                $table_3 = $all_selected_tables[2];
                $table_3_fields = array_keys($mappings[$table_3]['mappings'][$table_3]['properties']);

                // We need to find the connection table, which has common field with both other two tables
                // The connection table is the one that will be elasticsearched twice.
                $table_1_elastic_count = 0;
                $table_2_elastic_count = 0;
                $table_3_elastic_count = 0;


                //================= table_1 vs table_2 ================================================
                //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                $common_field_12 = array_intersect($table_1_fields, $table_2_fields);
                // $common_field is an array, but I need it to be a string
                $common_field_12 = implode($common_field_12);


                if(!empty($common_field_12)){

                    //=====================================
                    // Implement elasticsearch on $table_1
                    //+++++++++++++++++++++++++++++++++++++ 
                    $params['index'] = $table_1 ;
                    $params['type'] = $table_1;
                    $params['size'] = 1000000;

                    // replace the query string with corresponding data (query method, field name, keywords) 
                    $output = '';
                    foreach($_SESSION['all_selected_fields'][$table_1] as $field){
                        $search = array("_field_", "_keyword_");
                        $replace = array($field, $_SESSION['keywords'][$field]);
                        // Don't insert query sentences when keyword is empty
                        if(!empty($_SESSION['keywords'][$field])){
                            $replaced_query_sentence = str_replace($search, $replace, $query_sentence);
                            $output .= $replaced_query_sentence;
                        }

                    }
                    $output = rtrim($output, ',');

                    $params['body'] = $body_header.$output.$body_end;

                    // display 1000000 records
                    $params['size'] = 1000000;


                    //===run elasticsearch================  
                    //++++++++++++++++++++++++++++++++++++
                    $client = new Elasticsearch\Client();
                    $elastic_table_1_results = $client->search($params);
                    $table_1_elastic_count++;


	
                    //=====================================
                    // Implement elasticsearch on $table_2
                    //+++++++++++++++++++++++++++++++++++++ 
                    $params['index'] = $table_2 ;
                    $params['type'] = $table_2;
                    $params['size'] = 1000000;

                    // replace the query string with corresponding data (query method, field name, keywords) 
                    $output = '';
                    foreach($_SESSION['all_selected_fields'][$table_2] as $field){
                        $search = array("_field_", "_keyword_");
                        $replace = array($field, $_SESSION['keywords'][$field]);
                        // Don't insert query sentences when keyword is empty
                        if(!empty($_SESSION['keywords'][$field])){
                            $replaced_query_sentence = str_replace($search, $replace, $query_sentence);
                            $output .= $replaced_query_sentence;
                        }

                    }
                    $output = rtrim($output, ',');

                    $params['body'] = $body_header.$output.$body_end;



                    //===run elasticsearch================  
                    //++++++++++++++++++++++++++++++++++++
                    $client = new Elasticsearch\Client();
                    $elastic_table_2_results = $client->search($params);
                    $table_2_elastic_count++;


                    // Display the elasticsearch results
    //              dpm($elastic_table_1_results);
    //              dpm($elastic_table_2_results);

	

                    // Add the $common_field to the list of selected fields for each table if it is not selected
                    // Add to $table_1
                    if(!in_array($common_field_12, $_SESSION['all_selected_fields'][$table_1])){
                        $_SESSION['all_selected_fields'][$table_1][] = $common_field_12;
                    }
                    // remove unselected fields from search results
                    foreach($elastic_table_1_results['hits']['hits'] as $key=>$search_hit){
                            foreach($_SESSION['all_selected_fields'][$table_1] as $field){
                                $search_output_table_1[$key][$field] = $search_hit['_source'][$field];
                            }
                            $search_output_table_1[$key]['score'] = $search_hit['_score'];
                    }








                    // Add to $table_2
                    if(!in_array($common_field_12, $_SESSION['all_selected_fields'][$table_2])){
                        $_SESSION['all_selected_fields'][$table_2][] = $common_field_12;
                    }
                    // remove unselected fields from search results
                    foreach($elastic_table_2_results['hits']['hits'] as $key=>$search_hit){
                            foreach($_SESSION['all_selected_fields'][$table_2] as $field){
                                $search_output_table_2[$key][$field] = $search_hit['_source'][$field];
                            }
                            $search_output_table_2[$key]['score'] = $search_hit['_score'];
                    }

//                  dpm($search_output_table_1);
//                  dpm($search_output_table_2);

                }

                //================= End of table_1 vs table_2 ============================
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



                //================= table_1 vs table_3 ================================================
                //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                $common_field_13 = array_intersect($table_1_fields, $table_3_fields);
                // $common_field is an array, but I need it to be a string
                $common_field_13 = implode($common_field_13);


                if(!empty($common_field_13)){

                    //=====================================
                    // Implement elasticsearch on $table_1
                    //+++++++++++++++++++++++++++++++++++++ 
                    $params['index'] = $table_1 ;
                    $params['type'] = $table_1;
                    $params['size'] = 1000000;

                    // replace the query string with corresponding data (query method, field name, keywords) 
                    $output = '';
                    foreach($_SESSION['all_selected_fields'][$table_1] as $field){
                        $search = array("_field_", "_keyword_");
                        $replace = array($field, $_SESSION['keywords'][$field]);
                        // Don't insert query sentences when keyword is empty
                        if(!empty($_SESSION['keywords'][$field])){
                            $replaced_query_sentence = str_replace($search, $replace, $query_sentence);
                            $output .= $replaced_query_sentence;
                        }

                    }
                    $output = rtrim($output, ',');

                    $params['body'] = $body_header.$output.$body_end;

                    // display 1000000 records
                    $params['size'] = 1000000;


                    //===run elasticsearch================  
                    //++++++++++++++++++++++++++++++++++++
                    $client = new Elasticsearch\Client();
                    $elastic_table_1_results = $client->search($params);
                    $table_1_elastic_count++;





                    //=====================================
                    // Implement elasticsearch on $table_3
                    //+++++++++++++++++++++++++++++++++++++ 
                    $params['index'] = $table_3 ;
                    $params['type'] = $table_3;
                    $params['size'] = 1000000;

                    // replace the query string with corresponding data (query method, field name, keywords) 
                    $output = '';
                    foreach($_SESSION['all_selected_fields'][$table_3] as $field){
                        $search = array("_field_", "_keyword_");
                        $replace = array($field, $_SESSION['keywords'][$field]);
                        // Don't insert query sentences when keyword is empty
                        if(!empty($_SESSION['keywords'][$field])){
                            $replaced_query_sentence = str_replace($search, $replace, $query_sentence);
                            $output .= $replaced_query_sentence;
                        }

                    }
                    $output = rtrim($output, ',');

                    $params['body'] = $body_header.$output.$body_end;


                    //===run elasticsearch================  
                    //++++++++++++++++++++++++++++++++++++
                    $client = new Elasticsearch\Client();
                    $elastic_table_3_results = $client->search($params);
                    $table_3_elastic_count++;


                    // Display the elasticsearch results
    //              dpm($elastic_table_1_results);
    //              dpm($elastic_table_3_results);









                    // Add the $common_field to the list of selected fields for each table if it is not selected
                    // Add to $table_1
                    if(!in_array($common_field_13, $_SESSION['all_selected_fields'][$table_1])){
                        $_SESSION['all_selected_fields'][$table_1][] = $common_field_13;
                    }
                    // remove unselected fields from search results
                    foreach($elastic_table_1_results['hits']['hits'] as $key=>$search_hit){
                            foreach($_SESSION['all_selected_fields'][$table_1] as $field){
                                $search_output_table_1[$key][$field] = $search_hit['_source'][$field];
                            }
                            $search_output_table_1[$key]['score'] = $search_hit['_score'];
                    }

	

                    // Add to $table_3
                    if(!in_array($common_field_13, $_SESSION['all_selected_fields'][$table_3])){
                        $_SESSION['all_selected_fields'][$table_3][] = $common_field_13;
                    }
                    // remove unselected fields from search results
                    foreach($elastic_table_3_results['hits']['hits'] as $key=>$search_hit){
                            foreach($_SESSION['all_selected_fields'][$table_3] as $field){
                                $search_output_table_3[$key][$field] = $search_hit['_source'][$field];
                            }
                            $search_output_table_3[$key]['score'] = $search_hit['_score'];
                    }

//                  dpm($search_output_table_1);
//                  dpm($search_output_table_3);

                }

                //================= End of table_1 vs table_3 ============================
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



               //================= table_2 vs table_3 ================================================
                //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                $common_field_23 = array_intersect($table_2_fields, $table_3_fields);
                // $common_field is an array, but I need it to be a string
                $common_field_23 = implode($common_field_23);


                if(!empty($common_field_23)){

                    //=====================================
                    // Implement elasticsearch on $table_2
                    //+++++++++++++++++++++++++++++++++++++ 
                    $params['index'] = $table_2 ;
                    $params['type'] = $table_2;
                    $params['size'] = 1000000;

                    // replace the query string with corresponding data (query method, field name, keywords) 
                    $output = '';
                    foreach($_SESSION['all_selected_fields'][$table_2] as $field){
                        $search = array("_field_", "_keyword_");
                        $replace = array($field, $_SESSION['keywords'][$field]);
                        // Don't insert query sentences when keyword is empty
                        if(!empty($_SESSION['keywords'][$field])){
                            $replaced_query_sentence = str_replace($search, $replace, $query_sentence);
                            $output .= $replaced_query_sentence;
                        }

                    }
                    $output = rtrim($output, ',');

                    $params['body'] = $body_header.$output.$body_end;

                    // display 1000000 records
                    $params['size'] = 1000000;


                    //===run elasticsearch================  
                    //++++++++++++++++++++++++++++++++++++
                    $client = new Elasticsearch\Client();
                    $elastic_table_2_results = $client->search($params);
                    $table_2_elastic_count++;



                    //=====================================
                    // Implement elasticsearch on $table_3
                    //+++++++++++++++++++++++++++++++++++++ 
                    $params['index'] = $table_3 ;
                    $params['type'] = $table_3;
                    $params['size'] = 1000000;

                    // replace the query string with corresponding data (query method, field name, keywords) 
                    $output = '';
                    foreach($_SESSION['all_selected_fields'][$table_3] as $field){
                        $search = array("_field_", "_keyword_");
                        $replace = array($field, $_SESSION['keywords'][$field]);
                        // Don't insert query sentences when keyword is empty
                        if(!empty($_SESSION['keywords'][$field])){
                            $replaced_query_sentence = str_replace($search, $replace, $query_sentence);
                            $output .= $replaced_query_sentence;
                        }

                    }
                    $output = rtrim($output, ',');

                    $params['body'] = $body_header.$output.$body_end;



                    //===run elasticsearch================  
                    //++++++++++++++++++++++++++++++++++++
                    $client = new Elasticsearch\Client();
                    $elastic_table_3_results = $client->search($params);
                    $table_3_elastic_count++;



                    // Display the elasticsearch results
    //              dpm($elastic_table_2_results);
    //              dpm($elastic_table_3_results);




                    // Add the $common_field to the list of selected fields for each table if it is not selected
                    // Add to $table_2
                    if(!in_array($common_field_23, $_SESSION['all_selected_fields'][$table_2])){
                        $_SESSION['all_selected_fields'][$table_2][] = $common_field_23;
                    }
                    // remove unselected fields from search results
                    foreach($elastic_table_2_results['hits']['hits'] as $key=>$search_hit){
                            foreach($_SESSION['all_selected_fields'][$table_2] as $field){
                                $search_output_table_2[$key][$field] = $search_hit['_source'][$field];
                            }
                            $search_output_table_2[$key]['score'] = $search_hit['_score'];
                    }








                    // Add to $table_3
                    if(!in_array($common_field_23, $_SESSION['all_selected_fields'][$table_3])){
                        $_SESSION['all_selected_fields'][$table_3][] = $common_field_23;
                    }
                    // remove unselected fields from search results
                    foreach($elastic_table_3_results['hits']['hits'] as $key=>$search_hit){
                            foreach($_SESSION['all_selected_fields'][$table_3] as $field){
                                $search_output_table_3[$key][$field] = $search_hit['_source'][$field];
                            }
                            $search_output_table_3[$key]['score'] = $search_hit['_score'];
                    }

//                  dpm($search_output_table_2);
//                  dpm($search_output_table_3);

                }

                //================= End of table_2 vs table_3 ============================
                //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


                //=========== Inner join $table_1, $table_2 and $table_3====================
				$inner_join_table = array();
                // when $table_1 is the connecting table
                if($table_1_elastic_count == 2){
                    foreach($search_output_table_1 as $table_1){
                        foreach($search_output_table_2 as $table_2){
                            if($table_1[$common_field_12] == $table_2[$common_field_12]){
                                $inner_join_table_0[] = array_merge($table_1, $table_2);
                            }
                        }
                    }
//					dpm($inner_join_table_0);
                    foreach($inner_join_table_0 as $table_0){
                        foreach($search_output_table_3 as $table_3){
                            if($table_0[$common_field_13] == $table_3[$common_field_13]){
                                $inner_join_table[] = array_merge($table_0, $table_3);
                            }
                        }
                    }

                $_SESSION['search_output_table'] = $inner_join_table;

                }elseif($table_2_elastic_count == 2){
                    foreach($search_output_table_2 as $table_2){
                        foreach($search_output_table_1 as $table_1){
                            if($table_2[$common_field_12] == $table_1[$common_field_12]){
                                $inner_join_table_0[] = array_merge($table_1, $table_2);
                            }
                        }
                    }

                    foreach($inner_join_table_0 as $table_0){
                        foreach($search_output_table_3 as $table_3){
                            if($table_0[$common_field_23] == $table_3[$common_field_23]){
                                $inner_join_table[] = array_merge($table_0, $table_3);
                            }
                        }
                    }

                $_SESSION['search_output_table'] = $inner_join_table;

                }else{
                    foreach($search_output_table_3 as $table_3){
                        foreach($search_output_table_1 as $table_1){
                            if($table_3[$common_field_13] == $table_1[$common_field_12]){
                                $inner_join_table_0[] = array_merge($table_1, $table_3);
                            }
                        }
                    }

                    foreach($inner_join_table_0 as $table_0){
                        foreach($search_output_table_2 as $table_2){
                            if($table_0[$common_field_23] == $table_2[$common_field_23]){
                                $inner_join_table[] = array_merge($table_0, $table_3);
                            }
                        }
                    }

                $_SESSION['search_output_table'] = $inner_join_table;



                }




	//dpm($elastic_table_1_results);
	//dpm($elastic_table_2_results);
	//dpm($elastic_table_3_results);
	
	
	
//	dpm($search_output_table_1);
//	dpm($search_output_table_2);
//	dpm($search_output_table_3);
	
				break;
	    }
	    
	
	}
	
	
	
	//====================== The end of elasticsearch ==========================
	//++++++++++++++++++++++ The end of elasticsearch ++++++++++++++++++++++++++	
	



	$form_state['redirect'] = 'elastic_search/search_results';

}//========================= The end of form submit function ====================
//++++++++++++++++++++++++++ The end of form submit function ++++++++++++++++++++





// callback function within the form's submit function
// the purpose is to redirect to another page to display the
// results after the form has been submitted.
function _elastic_search_results(){



	$output = '<hr>';
	foreach($_SESSION['search_output_table'] as $values){
		$header = array_keys($values);
		$rows[] = array_values($values);
	}		

	$per_page = 20;
	// Initialize the pager
	$current_page = pager_default_initialize(count($rows), $per_page);
	// Split your list into page sized chunks
	$chunks = array_chunk($rows, $per_page, TRUE);
	// Show the appropriate items from the list	
	$output .= theme('table', array('header' => $header, 'rows' => $chunks[$current_page] ));
	$output .= theme('pager', array('quantity', count($rows)));			
	

	return $output;

}//================ The end of callback function for results display ============
//+++++++++++++++++ The end of callback function for results display ++++++++++++







//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//
//================================ Theme functions ==============================

/**
 * Implements hook_theme().
 */
function elastic_search_theme(){
    return array(
        'elastic_search_form' => array(
            'render element' => 'form',
            'template' => 'elastic-search-form',
        ),
    );
}



/**
 * Assign the elements of the form to variables so
 * the themer can use those values to control how the form elements
 * are displayed.
 */

function template_preprocess_elastic_search_form(&$variables){
    // Create an empty array to hold elements that will be collected.
    $variables['elastic_search_form'] = array();
    // Create an empty array to store hidden elements that will be collected.
    $hidden = array();

    // Provide variables named after form keys so themers can print each element
    // independently.
    foreach(element_children($variables['form']) as $key){

        // For some reason I don't know, one form element doesn't have '#type'
        // so I have to write a conditional statement to get the $type variable.
        if(!empty($variables['form'][$key]['#type'])){
            $type = $variables['form'][$key]['#type'];
        }

        if($type == 'hidden' || $type == 'token'){
            $hidden[] = drupal_render($variables['form'][$key]);
        }
        else{
            $variables['elastic_search_form'][$key] = drupal_render($variables['form'][$key]);
        }

        // Hidden form elements have no value to themers. No need for separation.
        $variables['elastic_search_form']['hidden'] = implode($hidden);
    }


}//========================= The end of theme functions ====================================
//++++++++++++++++++++++++++ The end of theme functions ++++++++++++++++++++++++++++++++++++














//unset($_SESSION['all_selected_fields']);
//unset($_SESSION['query']);
//unset($_SESSION['keywords']);
//unset($_SESSION['common_field']);
unset($params);






/**
if(!empty($_SESSION['all_selected_fields'])){
	dpm($_SESSION['all_selected_fields']);
	dpm($_SESSION['query']);
	dpm($_SESSION['keywords']);
}

*/



/**
 * Build Elasticsearch query sentences
 */


/**
//===================== Query 1 ===========================
// The elasticsearch query below works without any problem.
//=========================================================

$body_header =  '{"query" : {"bool" : {"must" : [';

$query_sentence = '{"_query" : {"_field": "_keyword"}},';

$body_end = ']}}}';





$params = array();
if(!empty($_SESSION['all_selected_fields'])){    
//dpm($_SESSION['all_selected_fields']);
    foreach($_SESSION['all_selected_fields'] as $key=>$table){
    	$params['index'] = $key ;
    	$params['type'] = $key;
    
    	$output = '';
    	foreach($table as $field){
    		$search = array("_query", "_field", "_keyword");
    		$replace = array($_SESSION['query']['query_'.$field], $field, $_SESSION['keywords'][$field]);
    		$replaced_query_sentence = str_replace($search, $replace, $query_sentence);
    		$output .= $replaced_query_sentence;
    	}
    
//    	dpm($output);
    }


	$output = rtrim($output, ',');
	$params['body'] = $body_header.$output.$body_end;    
	$params['size'] = 1000000;
//dpm($params);
}


//=================== Query 1 ends =============================
*/


//===================== Query 2 begins ===========================
// The elasticsearch query below works without any problem.
//=========================================================
/**
$body_header =  '{"query" : {"bool" : {"must" : [';

$query_sentence = '{"query_string" : {"default_field": "_field_", "query": "_keyword_"}},';

$body_end = ']}}}';





$params = array();
if(!empty($_SESSION['all_selected_fields'])){    
//dpm($_SESSION['all_selected_fields']);
    foreach($_SESSION['all_selected_fields'] as $key=>$table){
    	$params['index'] = $key ;
    	$params['type'] = $key;
    
    	$output = '';
    	foreach($table as $field){
    		$search = array("_field_", "_keyword_");
    		$replace = array($field, $_SESSION['keywords'][$field]);
			// Don't insert query sentences when keyword is empty
			if(!empty($_SESSION['keywords'][$field])){
    			$replaced_query_sentence = str_replace($search, $replace, $query_sentence);
    			$output .= $replaced_query_sentence;
			}
    	}
    
//    	dpm($output);
    }


	$output = rtrim($output, ',');
	$params['body'] = $body_header.$output.$body_end;    
	$params['size'] = 1000000;
//dpm($params);
}

*/
//=================== Query 2 ends =============================




				//===========================++++++++++++++++++++++++++=========================================
				// It turns out using db_query and creating tables in database is a very slow methods. Discard it
				//===========================++++++++++++++++++++++++++=========================================

				//++++++++++++++++++++++++++++++++++++++++++++++++++++
				// Create a table in database to store search results+
				//====================================================




/**
				// define a function to generate table schema for each table
				function generate_table_schema($selected_table){
					$fields = array(
								'id' => array('type' => 'int', 'default' => NULL),
								'score' => array('type' => 'text', 'default' => NULL),
							);
					foreach($_SESSION['all_selected_fields'][$selected_table] as $field){
						$fields[$field] = array('type' => 'text', 'default' => NULL);
					}
					$table_schema = array();
					$table_schema['description'] = 'Schema '.$selected_table.' description';
					$table_schema['fields'] = $fields;
					
					return $table_schema;
				}




				//+++++++++++++++++++++++ $table_1 +++++++++++++++++++++
				// get table schema				
				$table_1_specification = generate_table_schema($table_1);

				// always create a new table in the database
				if(db_table_exists('elastic_'.$table_1)){
					db_drop_table('elastic_'.$table_1);
				}	
				db_create_table('elastic_'.$table_1, $table_1_specification);

				// insert data into the table
				foreach($search_output_table_1 as $data){
					db_insert('elastic_'.$table_1)->fields($data)->execute();
				}




				//+++++++++++++++++++++++ $table_2 +++++++++++++++++++++
				// get table schema				
				$table_2_specification = generate_table_schema($table_2);

				// always create a new table in the database
				if(db_table_exists('elastic_'.$table_2)){
					db_drop_table('elastic_'.$table_2);
				}
				db_create_table('elastic_'.$table_2, $table_2_specification);

				// insert data into the table
				foreach($search_output_table_2 as $data){
					db_insert('elastic_'.$table_2)->fields($data)->execute();
				}



				$sql = 'SELECT * FROM elastic_'.$table_1.'
						INNER JOIN elastic_'.$table_2.' ON elastic_'.$table_1.'.'.$common_field.' = elastic_'.$table_2.'.'.$common_field.';';
				$result = db_query($sql);
*/				

/**
				//+++++++++++++++++ join $table_1 & $table_2 +++++++++++++++
				$query = db_select($table_1, 't1');
				$query->join($table_2, 't2', 't1.feature_id = t2.feature_id');
				$query->fields('t1',array('species'))->execute();
				$results = $query->fetchAssoc();
*/	


