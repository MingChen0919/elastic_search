<?php

	require_once drupal_get_path('module', 'elastic_search').'/vendor/autoload.php';
	require_once 'api/elastic_search.api.php';
	require_once drupal_get_path('module', 'elastic_search').'/includes/elastic_search_homepage_search_box_form.inc';


set_time_limit(0);

/**
 * Implementation of hook_menu().
 */
function elastic_search_menu(){
	$pre = 'admin/config/search/elastic_search';
	$items[$pre] = array(
		'title' => 'Elastic search',
		'description' => 'Configure elastic indexing and build search interface',
		'page callback' => 'drupal_goto',
		'page arguments' => array($pre . '/indexing'),
		'access callback' => 'user_access',
		'access arguments' => array('administer users'),
	);


    $items[$pre.'/indexing'] = array(
        'title' => t('Indexing'),
		'page callback' => '_elastic_indexing_form',
        'access callback' => 'user_access',
        'access arguments' => array('administer users'),
        'type' => MENU_LOCAL_TASK,
		'file' => 'includes/elastic_indexing_form.inc',
		'weight' => 0,
    );
	$items[$pre.'/delete_elastic_indexed_tables'] = array(
		'title' => t('Delete indexed tables'),
		'page callback' => '_delete_elastic_indexed_tables',
		'access callback' => 'user_access',
		'access arguments' => array('administer users'),
		'type' => MENU_LOCAL_TASK,
		'file' => 'includes/delete_elastic_indexed_tables.inc',
		'weight' => 1,
	);
	$items[$pre.'/search_block_builder'] = array(
		'title' => t('Build search block'),
		'page callback' => '_elastic_search_block_build',
        'access callback' => 'user_access',
        'access arguments' => array('administer users'),
		'type' => MENU_LOCAL_TASK,
		'file' => 'includes/elastic_search_block_build_form.inc',
		'weight' => 2,
	);

    $items[$pre.'/search_blocks'] = array(
        'title' => t('Elastic search blocks'),
		'page callback' => '_elastic_search_blocks',
        //'page callback' => 'drupal_get_form',
        //'page arguments' => array('elastic_search_blocks_form'),
        'access callback' => 'user_access',
        'access arguments' => array('administer users'),
        'type' => MENU_LOCAL_TASK,
        'file' => 'includes/elastic_search_blocks_form.inc',
        'weight' => 3,
    );

    $items['elastic_search'] = array(
        'title' => '',
        'page callback' => '_elastic_search_interface_form',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
        'file' => 'includes/elastic_search_interface_form.inc',
    );

	$items['search-website'] = array(
		'title' => '',
		'page callback' => '_homepage_elastic_search_output',
		'access callback' => TRUE,
		'type' => MENU_NORMAL_ITEM,
		'file' => 'includes/elastic_search_homepage_search_box_form.inc',
	);

	return $items;
}


/** page callback to return elastic_indexing_form **/
function _elastic_indexing_form(){
	return drupal_get_form('elastic_indexing_form');
}

/** page callback to return delete_elastic_indices_form **/
function _delete_elastic_indexed_tables(){
	return drupal_get_form('delete_elastic_indexed_tables_form');
}


/** page callback to return elastic_search_block_build form **/
function _elastic_search_block_build(){
	return drupal_get_form('elastic_search_block_build_form');
}

/** page callback to return elastic_search_blocks form. **/
function _elastic_search_blocks(){
	//$elastic_search_blocks = variable_get('elastic_search_blocks');
	//return drupal_get_form('elastic_search_blocks_form', $elastic_search_blocks);
	return drupal_get_form('elastic_search_blocks_form', $_SESSION['elastic_search_blocks']);
}


/** page callback to return elastic_search_interface_form. **/
function _elastic_search_interface_form(){
	$elastic_search_interface = variable_get('elastic_search_interface');
	$output = drupal_get_form('elastic_search_interface_form', $elastic_search_interface);
	$output = render($output);

	return $output;
}




//** implements hook_preprocess_elastic_search_interface_form(). **//
function elastic_search_form_elastic_search_interface_form_alter(&$form, &$form_state){


/**
	//------------ modify form for search_transcripts---------------------------------
	// change labels for the form elements.
	$form['search_transcripts']['search_transcripts_all|abbreviation']['#title'] 	= 	t('Organism');
	$form['search_transcripts']['search_transcripts_all|abbreviation']['#type']		= 'select';
	$form['search_transcripts']['search_transcripts_all|abbreviation']['#options']	= array(
		'' => t('Any organism'),
		'A. saccharum' => t('Sugar Maple (Acer saccharum)'),
		//'\"C. dentata\"' => t('American Chestnut (Castanea dentat)'),		// no transcripts data
		//'\"mollissima\"' => t('Chinese Chestnut (Castanea mollissima)'),
		//'\"F. grandifolia\"' => t('American Beech (Fagus grandifolia)'),	// no transcripts data
		//'\"serotina\"' => t('Black Cherry (Prunus serotina)'),
		//'\"americana\"' => t('White Ash (Fraxinus americana)'),
		'F. pennsylvanica' => t('Green Ash (Fraxinus pennsylvanica)'),
		'G. triacanthos' => t('Honeylocust (Gleditsia triacanthos)'),
		'J. nigra\"' => t('Black Walnut (Juglans nigra)'),
		'L. styraciflua' => t('Sweetgum (Liquidambar styraciflua)'),
		'L. tulipifera' => t('Tulip Poplar (Liriodendron tulipifera)'),
		'N. sylvatica' => t('Blackgum (Nyssa sylvatica)'),
		//'\"borbonia' => t('Redbay (Persea borbonia)'),
		//'\"Q. alba\"' => t('White Oak (Quercus alba)'),					// no transcripts data
		//'\"Q. robur\"' => t('Pedunculate Oak (Quercus robur)'),			// no transcripts data
		'rubra' => t('Northern Red Oak (Quercus rubra)'),
	);
	$form['search_transcripts']['search_search_transcripts_all|abbreviation'] = array(
		'#type' => 'value',
		'#value' => 'match',
	);
	$form['search_transcripts']['search_transcripts_all|hit_description']['#title'] = 	t('Blast hit description');
	//$form['search_transcripts']['search_transcripts_all|type']['#title'] 			= 	t('Sequence type');
	$form['search_transcripts']['search_transcripts_all|uniquename']['#title'] 		= 	t('Unique name');

	unset($form['search_transcripts']['search_transcripts_all|hit_best_eval']);
	unset($form['search_transcripts']['search_search_transcripts_all|hit_best_eval']);
	unset($form['search_transcripts']['search_transcripts_all|hit_best_score']);
	unset($form['search_transcripts']['search_search_transcripts_all|hit_best_score']);
	unset($form['search_transcripts']['search_transcripts_all|seqlen']);
	unset($form['search_transcripts']['search_search_transcripts_all|seqlen']);

	//$form['search_transcripts']['submit']['#value'] = t('Elasticsearch|transcripts');


	//------------ modify form for website_node_content---------------------------------
	// change labels
	$form['website_node_content']['field_data_body|body_value']['#title'] = t('search webpages');
	$form['website_node_content']['field_data_body|entity_id']['#type'] = 'hidden';
	$form['website_node_content']['search_field_data_body|entity_id']['#type'] = 'hidden';
	//$form['website_node_content']['submit']['#value'] = t('Elasticsearch|webpages');

*/

}





/**
 * Implements hook_block_info().
 */
function elastic_search_block_info(){
    $blocks['elasticsearch_results'] = array(
        'info' => t('Elastic search results for transcript data'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => 'elastic_search',
        'cache' => DRUPAL_NO_CACHE,
    );

	// a search box displayed on the front page
	$blocks['elastic_homepage_search_box'] = array(
		'info' => t('An elastic search box on the home page'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => 'elastic_search',
        'cache' => DRUPAL_NO_CACHE,
		'weight' => 0,
	);


    return $blocks;
}


/**
 * Implements hook_block_view().
 */
function elastic_search_block_view($delta = ''){

	$block = array();
    switch($delta){
        case 'elasticsearch_results':
            $block['subject'] = '';//t('Elastic search results');
            $block['content'] = _elastic_search_results();
        break;

		case 'elastic_homepage_search_box':
			$block['subject'] = '';
			$block['content'] = drupal_get_form('elastic_search_homepage_search_box_form');
		break;

	}

    return $block;
}


function _elastic_search_results(){

	$output = '';
    //get the first element of an array
    //get headers with clicking sorting
	if(!empty($_SESSION['search_output_table'])){
	    $elements = array_chunk($_SESSION['search_output_table'], 1, 1);
	    foreach($elements[0] as $value){
	        foreach(array_keys($value) as $field){
	            $header[] = array('data'=> $field, 'field'=>$field);
	        }
	    }

	//++++++++++++++++++++++CURRENTLY WORKING+++++++++++++++++++++++
	    // implementation of sort by clicking
	    $sorted_output = $_SESSION['search_output_table']; // default is unsorted
	    if(isset($_GET['sort']) && isset($_GET['order'])){
	        $sorted_output = sort_2d_array_by_value($_SESSION['search_output_table'], $_GET['order'], $_GET['sort']);
	    }
	//+++++++++++++++++++++CURRENTLY WORKING++++++++++++++++++++++++++
	
	
	
	    foreach($sorted_output as $values){
	//      $header[] = array_keys($values);
			if(!empty($values['uniquename'])){ // add a link to each feature unique name.
	        	$values['uniquename'] = l($values['uniquename'], 'feature/'.$values['uniquename']); // add link to feature uniquename.
			}
            if(!empty($values['unique_name'])){ // add a link to each feature unique name.
                $values['unique_name'] = l($values['unique_name'], 'feature/'.$values['unique_name']); // add link to feature uniquename.
            }			
			if(!empty($values['entity_id'])){
				$values['entity_id'] = l('read this page', 'node/'. $values['entity_id']); // add link to web page based entity_id.
			}
	        $rows[] = array_values($values);
	    }
	
	    $per_page = 10;
	    // Initialize the pager
	    $current_page = pager_default_initialize(count($rows), $per_page);
	    // Split your list into page sized chunks
	    $chunks = array_chunk($rows, $per_page, TRUE);
	    // Show the appropriate items from the list 
	    $output .= theme('table', array('header' => $header, 'rows' => $chunks[$current_page] ));
	    $output .= theme('pager', array('quantity', count($rows)));


		// store data for writing downloadable file
		$_SESSION['_download_table'] = $_SESSION['search_output_table'];
		// unset $_SESSION['search_output_table'] for not displaying the results if page is refreshed
		//unset($_SESSION['search_output_table']);
		//variable_del('search_record_count');
	}


	


    return $output;

}// return elastic search output






/** implements hook_theme() **/
// set custom tpl for the elastic_search_interface_form //
function elastic_search_theme(){
	return array(
		'elastic_search_interface_form' => array(
			'render element' => 'form',
			'path' => drupal_get_path('module', 'elastic_search') . '/templates',
			'template' => 'elastic-search-interface',
		),
		'elastic_search_homepage_search_box_form' => array(
			'render element' => 'form',
			'path' => drupal_get_path('module', 'elastic_search') . '/templates',
			'template' => 'elastic-search-homepage-search-box',
		),
	);
}






/**
 * implement hook_cron_queue_info()
 */
function elastic_search_cron_queue_info(){
	$queues['elastic_queue'] = array(
		'worker callback' => 'elasticindexing_queue_item',
		//'time' => 60 * 60 * 2,	## the amount of time drupal spends on calling the worker function. 
		'time' => 30,
	);

	return $queues;
}



function elasticindexing_queue_item($item){
	$client = new Elasticsearch\Client();

	$index = str_replace('chado.', '', $_SESSION['selected_table']);
	$sql = $item->sql;
	$result = db_query($sql);

	$mappings = $client->indices()->getMapping();
    $indices = array_keys($mappings);

	if($_SESSION['selected_table'] == 'index_website'){
		// INDEX THE ENTIRE WEBSITE
    	if(!in_array($index, $indices)){
        	foreach($result as $record){
                $doc = objectToArray($record);

                $properties['node_title'] = array('type' => 'string', 'analyzer' => $index);
                $properties['node_id'] = array('type' => 'string', 'analyzer' => $index);
                $properties['node_content'] = array('type' => 'string', 'analyzer' => $index);

                $mappings = array(
                    '_default_' => array('properties' => $properties),
                );


                $params = array();
                $params = [
                    'index' => $index,
                    'body' => [
                        'settings' => [
                            'number_of_shards' => 1,
                            'number_of_replicas' => 0,
                            'analysis' => [
                                'filter' => [
                                    'myTokenFilter1' => [
                                        'type' => 'word_delimiter'
                                    ]
                                ],
                                'char_filter' => [
                                    'my_html' => [
                                        'type' => 'html_strip',
                                    ]
                                ],
                                'analyzer' => [
                                    $index => [
                                        'type' => 'custom',
                                        'tokenizer' => 'standard',
                                        'char_filter' => ['my_html'],
                                        'filter' => ['myTokenFilter1', 'lowercase']
                                    ]
                                ]
                            ]
                        ],
                        'mappings' => $mappings
                    ]
                ];

                $client->indices()->create($params);
                break;
            }

        }
        foreach($result as $record){
            $doc = objectToArray($record);
            $params = array();
            $params['index'] = $index;
            $params['type'] = str_replace('chado.', '', $_SESSION['selected_table']);

            $body['node_id'] = $doc['nid'];
            $body['node_title'] = $doc['title'];

			$node = node_load($doc['nid']);
            $node_element = node_view($node);
            $node_html = drupal_render_children($node_element);
            // combine the title and content so that searching the content will also searching the title.
			$body['node_content'] = $doc['title'].strip_tags($node_html);
            //$node_string = $body;

			//$params['body'] = array('node_content' => $node_string);
			$params['body'] = $body;
            $client->index($params);

        } // end foreach($result as $record)
    } // end if($_SESSION['selected_table'] == 'index_website')
    else {  // index a selected table
        if(!in_array($index, $indices)){
            foreach($result as $record){
                $doc = objectToArray($record);

                $properties = array();
                foreach(array_keys($doc) as $field) {
                    //$field = array('type' => 'string', 'analyzer' => $index);
                    $properties[$field] = array('type' => 'string', 'analyzer' => $index);
                }
                $mappings = array(
                    '_default_' => array('properties' => $properties),
                );


                $params = array();
                $params = [
                    'index' => $index,
                    'body' => [
                        'settings' => [
                            'number_of_shards' => 1,
                            'number_of_replicas' => 0,
                            'analysis' => [
                                'filter' => [
                                    'myTokenFilter1' => [
                                        'type' => 'word_delimiter'
                                    ]
                                ],
                                'char_filter' => [
                                    'my_html' => [
                                        'type' => 'html_strip',
                                    ]
                                ],
                                'analyzer' => [
                                    $index => [
                                        'type' => 'custom',
                                        'tokenizer' => 'standard',
                                        'char_filter' => ['my_html'],
                                        'filter' => ['myTokenFilter1', 'lowercase']
                                    ]
                                ]
                            ]
                        ],
                        'mappings' => $mappings
                    ]
                ];

                $client->indices()->create($params);
                break;
            }
		}

        foreach($result as $record){
            $doc = objectToArray($record);

            $params = array();
            $params['index'] = $index;
            $params['type'] = str_replace('chado.', '', $_SESSION['selected_table']);
			$params['body'] = $doc;

            $client->index($params);
        } 
	}

}


