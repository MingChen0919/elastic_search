<?php

  require_once drupal_get_path('module', 'tripal_elasticsearch').'/vendor/autoload.php';
  require_once 'api/tripal_elasticsearch.api.php';
  require_once drupal_get_path('module', 'tripal_elasticsearch').'/includes/tripal_elasticsearch_main_search_box_form.inc';


set_time_limit(0);

/**
 * Implementation of hook_menu().
 */
function tripal_elasticsearch_menu(){
  $pre = 'admin/config/search/elastic_search';
  $items[$pre] = array(
    'title' => 'Elastic search',
    'description' => 'Configure elastic indexing and build search interface',
    'page callback' => 'drupal_goto',
    'page arguments' => array($pre . '/indexing'),
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
  );


    $items[$pre.'/indexing'] = array(
    'title' => t('Indexing'),
    'page callback' => '_elastic_indexing_form',
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/elastic_indexing_form.inc',
    'weight' => 0,
    );
  $items[$pre.'/delete_elastic_indexed_tables'] = array(
    'title' => t('Delete indexed tables'),
    'page callback' => '_delete_elastic_indexed_tables',
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/delete_elastic_indexed_tables.inc',
    'weight' => 1,
  );
  $items[$pre.'/search_block_builder'] = array(
    'title' => t('Build search block'),
    'page callback' => '_elastic_search_block_build',
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/elastic_search_block_build_form.inc',
    'weight' => 2,
  );

  $items[$pre.'/search_blocks'] = array(
    'title' => t('Elastic search blocks'),
    'page callback' => '_elastic_search_blocks',
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/elastic_search_blocks_form.inc',
    'weight' => 3,
  );

  $items['elastic_search'] = array(
    'title' => '', // t('Elasticsearch'),
    'page callback' => 'tripal_elasticsearch_page',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tripal_elasticsearch_blocks_form.inc',
  );
  $items['elastic_search/organism/%'] = array(
    'title' => '', // t('Elasticsearch'),
    'page callback' => 'tripal_elasticsearch_page',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tripal_elasticsearch_blocks_form.inc',
  );
  $items['search-website'] = array(
    'title' => '',
    'page callback' => 'tripal_elasticsearch_main_search_page',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tripal_elasticsearch_main_search_box_form.inc',
  );

  return $items;
}


/** page callback to return elastic_indexing_form **/
function _elastic_indexing_form(){
  return drupal_get_form('elastic_indexing_form');
}

/** page callback to return delete_elastic_indices_form **/
function _delete_elastic_indexed_tables(){
  return drupal_get_form('delete_elastic_indexed_tables_form');
}


/** page callback to return elastic_search_block_build form **/
function _elastic_search_block_build(){
  return drupal_get_form('elastic_search_block_build_form');
}

/** page callback to return elastic_search_blocks form. **/
function _elastic_search_blocks(){
  return drupal_get_form('elastic_search_blocks_form');
}



/*
 * Create an empty page for hosting tripal_elasticsearch blocks
 * These blocks are configurable and can be placed anywhere else.
 */
function tripal_elasticsearch_page(){
  return '';
}

/*
 * Create an empty page for site wide searching results.
 */
function tripal_elasticsearch_main_search_page(){
  return '';
}

/**
 * Implements hook_block_info().
 */
function tripal_elasticsearch_block_info(){
  $blocks = array();
  // Block for main search box.
  $blocks['main_search_box'] = array(
    'info' => t('tripal_elasticsearch main search box'),
    'status' => TRUE,
    'region' => 'content',
    'cache' => DRUPAL_NO_CACHE,
    'weight' => -99,
  );
  // Block for main search results
  $blocks['main_search_results'] = array(
    'info' => t('tripal_elasticsearch main search box'),
    'status' => TRUE,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "search-website",
    'cache' => DRUPAL_NO_CACHE,
  );  

  $result = db_query('SELECT DISTINCT(table_name) FROM elastic_search');
  foreach($result as $record){
    // For some reason, block name cannot be longer than 32 chars
    $block_name_form = substr('elastic form: '.$record->table_name, 0, 32); 
    $blocks[$block_name_form] = array(
      'info' => t('tripal_elasticsearch block for search form: '.$record->table_name),
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => "elastic_search\nelastic_search/*",
      'cache' => DRUPAL_NO_CACHE,
    );
    $block_name_hits = substr('elastic hits: '.$record->table_name, 0, 32);
    $blocks[$block_name_hits] = array(
      'info' => t('tripal_elasticsearch block for search results: '.$record->table_name),
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => "elastic_search\nelastic_search/*",
      'cache' => DRUPAL_NO_CACHE,
    );
  }

    return $blocks;
}


/**
 * Implements hook_block_view().
 */
function tripal_elasticsearch_block_view($delta = ''){

  $block = array();
  $result = db_query('SELECT DISTINCT(table_name) FROM elastic_search');
  $table_names = array();
  foreach($result as $record){
    $table_names[] = $record->table_name;
  } 
  // strip off 'ES_form' or 'ES_hits' to get table name
  $table = substr($delta, 14);
  if(in_array($table, $table_names)){
    $form = 'elastic form: '.$table;
    $hits = 'elastic hits: '.$table;

    // Get search hits
    $form_input = isset($_SESSION['elastic_form_input'])?$_SESSION['elastic_form_input']:null;    
    unset($_SESSION[$table.'_form_input']);
    if(!empty($form_input)){
      $index_table = _get_field_keyword_pairs($form_input)['table'];
      $field_keyword_pairs = _get_field_keyword_pairs($form_input)['field_keyword_pairs'];
      // Only display the results block for the corresponding form block
      if($table == $index_table and is_elastic_index($index_table)){
        $search_hits = _run_elastic_search($table, $field_keyword_pairs)['search_hits'];
        if(!empty($search_hits)){
          $search_hits_table = get_search_hits_table($search_hits);
        }
        else{
          $search_hits_table = '<font color="red">No records were found.</font>';
        }
      }
      else{
        $search_hits_table = '<font color="red">No indexed data for table <b>'.$table.'</b>. 
                              Please index the table first.</font>';
      }
    }// ======= End of getting search hits=================
    switch($delta){
      case $form:
        $block['subject'] = $form;
        $block['content'] = drupal_get_form('ES_table_blocks_form', $table);
        break;
      case $hits:
        $block['subject'] = $hits;
        if($table != $index_table){
          $search_hits_table = '';
        }
        $block['content'] = $search_hits_table;
        break;
    }
  }  
  else{ // display the main search box block
    switch($delta){
      case 'main_search_box':
        $block['subject'] = '';
        $block['content'] = drupal_get_form('main_search_box_form');
        break;
      case 'main_search_results':
        $block['subject'] = '';
        $block['content'] = 'This is your website search results';
    }
  }


  drupal_add_js(drupal_get_path('module', 'tripal_elasticsearch').'/js/hit_description.js');

  return $block;
}



/**
 * take a search_output array and turn a themed table
 */
function _elastic_search_results($search_output_arr){

  $output = '';
    //get the first element of an array
    //get headers with clicking sorting
  if(!empty($search_output_arr)){
      $elements = array_chunk($search_output_arr, 1, 1);
      foreach($elements[0] as $value){
          foreach(array_keys($value) as $field){
              $header[] = array('data'=> $field, 'field'=>$field);
          }
      }

      // implementation of sort by clicking
      $sorted_output = $search_output_arr; // default is unsorted
      if(isset($_GET['sort']) && isset($_GET['order'])){
          $sorted_output = sort_2d_array_by_value($search_output_arr, $_GET['order'], $_GET['sort']);
      }
  
  
  
      foreach($sorted_output as $values){
        if(!empty($values['uniquename'])){ // add a link to each feature unique name.
          $values['uniquename'] = l($values['uniquename'], 'feature/'.$values['uniquename']); // add link to feature uniquename.
        }
        if(!empty($values['entity_id'])){
          $values['entity_id'] = l('read this page', 'node/'. $values['entity_id']); // add link to web page based entity_id.
        }
        if(!empty($values['abbreviation']) and !empty($values['genus']) and !empty($values['species'])){
          $values['abbreviation'] = l($values['abbreviation'], 'organism/'.$values['genus'].'/'.$values['species']);
        }
        if(!empty($values['hit_description'])){
          $arr = explode('<br/>', $values['hit_description']);
          $arr[0] = !empty($arr[0])?$arr[0]:'';
          $arr[1] = !empty($arr[1])?$arr[1]:'';
          $arr[2] = !empty($arr[2])?$arr[2]:'';
          $teaser = '<div class="hit_description_teaser">'.$arr[0].'<br/>'.$arr[1].'<br/>'.$arr[2].'<br/><b>more...</b><br/></div>';
          $all = '<div class="hit_description_all">'.$values['hit_description'].'</div>';
          $values['hit_description'] = $teaser.$all;
          
        }
        $rows[] = array_values($values);
      }
  
      $per_page = 10;
      // Initialize the pager
      $current_page = pager_default_initialize(count($rows), $per_page);
      // Split your list into page sized chunks
      $chunks = array_chunk($rows, $per_page, TRUE);
      // Show the appropriate items from the list 
      $output .= theme('table', array('header' => $header, 'rows' => $chunks[$current_page] ));
      $output .= theme('pager', array('quantity', count($rows)));


    // store data for writing downloadable file
    $_SESSION['_download_table'] = $search_output_arr;
    // unset $search_output_arr for not displaying the results if page is refreshed
    //unset($search_output_arr);
    //variable_del('search_record_count');
  }

    return $output;

}// return elastic search output



/**
 * implement hook_cron_queue_info()
 */
function tripal_elasticsearch_cron_queue_info(){
  $queues['elastic_queue'] = array(
    'worker callback' => 'elasticindexing_queue_item',
    //'time' => 60 * 60 * 2,  ## the amount of time drupal spends on calling the worker function. 
    'time' => 30,
  );

  return $queues;
}


/**
 * queue worker function
 */
function elasticindexing_queue_item($item){
  $client = new Elasticsearch\Client();

  $selected_table = $item->selected_table;

  $index = str_replace('chado.', '', $selected_table);
  $sql = $item->sql;
  $result = db_query($sql);

  $mappings = $client->indices()->getMapping();
    $indices = array_keys($mappings);

  if($selected_table == 'index_website'){
    // INDEX THE ENTIRE WEBSITE
      if(!in_array($index, $indices)){
          foreach($result as $record){
                $doc = objectToArray($record);

                $properties['node_title'] = array('type' => 'string', 'analyzer' => $index);
                $properties['node_id'] = array('type' => 'string', 'analyzer' => $index);
                $properties['node_content'] = array('type' => 'string', 'analyzer' => $index);

                $mappings = array(
                    '_default_' => array('properties' => $properties),
                );


                $params = array();
                $params = [
                    'index' => $index,
                    'body' => [
                        'settings' => [
                            'number_of_shards' => 1,
                            'number_of_replicas' => 0,
                            'analysis' => [
                                'filter' => [
                                    'myTokenFilter1' => [
                                        'type' => 'word_delimiter',
                    'split_on_numerics' => 'false'
                                    ]
                                ],
                                'char_filter' => [
                                    'my_html' => [
                                        'type' => 'html_strip',
                                    ]
                                ],
                                'analyzer' => [
                                    $index => [
                                        'type' => 'custom',
                                        'tokenizer' => 'standard',
                                        'char_filter' => ['my_html'],
                                        'filter' => ['myTokenFilter1', 'lowercase']
                                    ]
                                ]
                            ]
                        ],
                        'mappings' => $mappings
                    ]
                ];

                $client->indices()->create($params);
                break;
            }

        }
        foreach($result as $record){
            $doc = objectToArray($record);
            $params = array();
            $params['index'] = $index;
            $params['type'] = str_replace('chado.', '', $selected_table);

            $body['node_id'] = $doc['nid'];
            $body['node_title'] = $doc['title'];

      $node = node_load($doc['nid']);
            $node_element = node_view($node);
            $node_html = drupal_render_children($node_element);
            // combine the title and content so that searching the content will also searching the title.
      $body['node_content'] = $doc['title'].strip_tags($node_html);
            //$node_string = $body;

      //$params['body'] = array('node_content' => $node_string);
      $params['body'] = $body;
      // use node ID as the document ID.
      $params['id'] = $doc['nid'];
            $client->index($params);

        } // end foreach($result as $record)

  watchdog('elastic_search cron queue', 'Queue "elastic_queue" processed item at time '. format_date(time()));

    } // end if($selected_table == 'index_website')
    else {  // index a selected table
        if(!in_array($index, $indices)){
            foreach($result as $record){
                $doc = objectToArray($record);

                $properties = array();
                foreach(array_keys($doc) as $field) {
                    //$field = array('type' => 'string', 'analyzer' => $index);
                    $properties[$field] = array('type' => 'string', 'analyzer' => $index);
                }
                $mappings = array(
                    '_default_' => array('properties' => $properties),
                );


                $params = array();
                $params = [
                    'index' => $index,
                    'body' => [
                        'settings' => [
                            'number_of_shards' => 1,
                            'number_of_replicas' => 0,
                            'analysis' => [
                                'filter' => [
                                    'myTokenFilter1' => [
                                        'type' => 'word_delimiter',
                    'split_on_numerics' => 'false'
                                    ]
                                ],
                                'char_filter' => [
                                    'my_html' => [
                                        'type' => 'html_strip',
                                    ]
                                ],
                                'analyzer' => [
                                    $index => [
                                        'type' => 'custom',
                                        'tokenizer' => 'standard',
                                        'char_filter' => ['my_html'],
                                        'filter' => ['myTokenFilter1', 'lowercase']
                                    ]
                                ]
                            ]
                        ],
                        'mappings' => $mappings
                    ]
                ];

                $client->indices()->create($params);
                break;
            }
    }

        foreach($result as $record){
            $doc = objectToArray($record);

            $params = array();
            $params['index'] = $index;
            $params['type'] = str_replace('chado.', '', $selected_table);
      $params['body'] = $doc;

            $client->index($params);
        } 

  watchdog('elastic_search cron queue', 'Queue "elastic_queue" processed item at time '. format_date(time()));

  }

}




/**
 * implements hook_node_update().
 * Any node updates will also update the corresponding elasticsearch docs.
 */
function tripal_elasticsearch_node_update($node){
  $queue = DrupalQueue::get('elastic_queue');
  $nid = $node->nid;
  $sql = "SELECT title, nid FROM node WHERE nid=$nid ;";
  $item = new stdClass();
  $item->sql = $sql;
  $item->selected_table = 'index_website';
  $queue->createItem($item);
}

/**
 * implements hook_node_insert().
 * Any new nodes will be added to the  elasticsearch cron queue.
 */
function tripal_elasticsearch_node_insert($node){
  $queue = DrupalQueue::get('elastic_queue');
  $nid = $node->nid;
  $sql = "SELECT title, nid FROM node WHERE nid=$nid ;";
  $item = new stdClass();
  $item->sql = $sql;
  $item->selected_table = 'index_website';
  $queue->createItem($item);
}


/**
 * Implements hook_node_delete().
 * the indexed doc for the deleted node will be also deleted in elasticsearch
 */
function tripal_elasticsearch_node_delete($node){
  $nid = $node->nid;
  $params = array();
  $params = [
    'index' => 'index_website',
    'type' => 'index_website',
    'id' => $nid,
    'body' => ['fake_field' => 'fake document']
  ];
  // create a fake document and index it in case that the node
  // that is being deleted doesn't exit in elasticsearch
  $client = new Elasticsearch\Client();
  $client->index($params);


  $params = array();
  $params = [
    'index' => 'index_website',
    'type' => 'index_website',
    'id' => $nid,
  ];
  $client->delete($params);
}

