<?php

/*
require_once drupal_get_path('module', 'tripal_elasticsearch') . '/vendor/autoload.php';
require_once drupal_get_path('module', 'tripal_elasticsearch') . '/api/tripal_elasticsearch.api.php';
require_once drupal_get_path('module', 'tripal_elasticsearch') . '/api/CronQueueWorker.php';
require_once drupal_get_path('module', 'tripal_elasticsearch') . '/api/ElasticConnection.php';
require_once drupal_get_path('module', 'tripal_elasticsearch') . '/api/CronQueueWorker.php';
require_once drupal_get_path('module', 'tripal_elasticsearch') . '/includes/search/tripal_elasticsearch_main_search_box_form.inc';
require_once drupal_get_path('module', 'tripal_elasticsearch') . '/includes/search/tripal_elasticsearch_blocks_form.inc';
*/

require drupal_get_path('module', 'tripal_elasticsearch') . '/api/bootstrap.php';


set_time_limit(0);


/**
 * Implementation of hook_menu().
 */
function tripal_elasticsearch_menu()
{
    //$pre = 'admin/config/search/elastic_search';
    $pre = 'admin/tripal/extension/tripal_elasticsearch';
    $items[$pre] = array(
        'title' => 'Tripal Elasticsearch',
        'description' => 'Configure elastic indexing and build search interface',
        'page callback' => 'drupal_goto',
        'page arguments' => array($pre . '/admin_pages'),
        'access callback' => 'user_access',
        'access arguments' => array('administer users'),
    );
    $items[$pre . '/admin_pages'] = array(
        'title' => 'Tripal Elasticsearch Administration',
        'description' => 'Tripal Elasticsearch Administration Pages',
        'page callback' => 'tripal_elasticsearch_admin_page',
        'access callback' => 'user_access',
        'access arguments' => array('administer users'),
        'file' => 'tripal_elasticsearch.admin.inc',
    );

    $items[$pre . '/connect_to_elasticsearch_cluster'] = array(
        'title' => t('Connect to elasticsearch cluster'),
        'page callback' => 'connect_to_elasticsearch_cluster_page',
        'access callback' => 'user_access',
        'access arguments' => array('administer users'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'tripal_elasticsearch.admin.inc',
        'weight' => 1,
    );
    $items[$pre . '/indices_management'] = array(
        'title' => t('Indexing Website'),
        'page callback' => 'indexing_website_page',
        'access callback' => 'user_access',
        'access arguments' => array('administer users'),
        'type' => MENU_NORMAL_ITEM,
        'weight' => 2,
        'file' => 'tripal_elasticsearch.admin.inc',
    );
    $items[$pre . '/indices_management/indexing_website'] = array(
        'title' => t('Indexing Website'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
    );
    $items[$pre . '/indices_management/indexing_database_table'] = array(
        'title' => t('Indexing Database Table'),
        'page callback' => 'indexing_database_table_page',
        'access callback' => 'user_access',
        'access arguments' => array('administer users'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 2,
        'file' => 'tripal_elasticsearch.admin.inc',
    );
    $items[$pre . '/indices_management/delete_indices'] = array(
        'title' => t('Delete Indices'),
        'page callback' => 'delete_indices_page',
        'access callback' => 'user_access',
        'access arguments' => array('administer users'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 3,
        'file' => 'tripal_elasticsearch.admin.inc',
    );





    $items[$pre . '/search'] = array(
        'title' => t('Build search forms'),
        'page callback' => 'build_search_forms_page',
        'access callback' => 'user_access',
        'access arguments' => array('administer users'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'tripal_elasticsearch.admin.inc',
    );
    $items[$pre . '/search/build_search_forms'] = array(
        'title' => t('Build search forms'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 1,
    );
    $items[$pre . '/search/link_results_to_pages'] = array(
        'title' => t('Link results to pages'),
        'page callback' => 'link_results_to_pages_page',
        'access callback' => 'user_access',
        'access arguments' => array('administer users'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 3,
        'file' => 'tripal_elasticsearch.admin.inc',
    );
    $items[$pre . '/search/alter_search_forms'] = array(
        'title' => t('Alter search forms'),
        'page callback' => 'alter_search_forms_page',
        'access callback' => 'user_access',
        'access arguments' => array('administer users'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 2,
        'file' => 'tripal_elasticsearch.admin.inc',
    );

    $items[$pre . '/search/delete_search_forms'] = array(
        'title' => t('Delete search forms'),
        'page callback' => 'delete_search_forms_page',
        'access callback' => 'user_access',
        'access arguments' => array('administer users'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 4,
        'file' => 'tripal_elasticsearch.admin.inc',
    );

    return $items;
}


function build_tripal_elasticelastic_block_page()
{
    $client = Elasticsearch\ClientBuilder::create()->setHosts(
        variable_get('elasticsearch_hosts', array('localhost:9200'))
    )->build();
    try {
        $client_health = $client->cat()->health();
        return drupal_get_form('build_tripal_elasticsearch_block_form');
    } catch (\Exception $e) {
        $message = $e->getMessage();
        $output = "<h2><font color='red'>$message. Please check if your elasticsearch cluster is running normally.</font></h2>";
        return $output;
    }
}

function delete_tripal_elasticsearch_blocks_page()
{
    return drupal_get_form('delete_tripal_elasticsearch_blocks_form');
}

function tripal_elasticsearch_add_links_page()
{
    $example_form = drupal_get_form(
        'tripal_elasticsearch_add_links_example_form'
    );
    $form = drupal_get_form('tripal_elasticsearch_add_links_form');
    $output = drupal_render($example_form) . drupal_render($form);
    return $output;
}

function tripal_elasticsearch_alter_form_page()
{
    return drupal_get_form('tripal_elasticsearch_alter_form');
}

/*
 * Create an empty page for hosting tripal_elasticsearch blocks
 * These blocks are configurable and can be placed anywhere else.
 */
function tripal_elasticsearch_page()
{
    return '';
}

/*
 * Create an empty page for site wide searching results.
 */
function tripal_elasticsearch_main_search_page()
{
    return '';
}

/**
 * Implements hook_block_info().
 */
function tripal_elasticsearch_block_info()
{
    $blocks = array();
    // Block for main search box.
    $blocks['main_search_box'] = array(
        'info' => t('tripal_elasticsearch main search box'),
        'status' => TRUE,
        'region' => 'header',
        'cache' => DRUPAL_NO_CACHE,
        'weight' => -99,
    );
    // Block for main search results
    $blocks['main_search_results'] = array(
        'info' => t('tripal_elasticsearch main search results'),
        'status' => TRUE,
        'region' => 'content',
        'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => "search-website",
        'cache' => DRUPAL_NO_CACHE,
    );

    /*
     * build blocks for each table in the tripal_elasticsearch_search_forms database table
     */
    $result = db_query('SELECT DISTINCT(table_name) FROM tripal_elasticsearch_search_forms');
    foreach ($result as $record) {
        // For some reason, block name cannot be longer than 32 chars
        $block_name_form = 'Search: ' . $record->table_name;
        $blocks[$block_name_form] = array(
            'info' => t(
                'tripal_elasticsearch search form: ' . $record->table_name
            ),
            'status' => TRUE,
            'region' => 'content',
            'visibility' => BLOCK_VISIBILITY_LISTED,
            'pages' => "elastic_search\nelastic_search/*",
            'cache' => DRUPAL_NO_CACHE,
        );
        $block_name_hits = 'Hits: ' . $record->table_name;
        $blocks[$block_name_hits] = array(
            'info' => t(
                'tripal_elasticsearch search results: ' . $record->table_name
            ),
            'status' => TRUE,
            'region' => 'content',
            'visibility' => BLOCK_VISIBILITY_LISTED,
            'pages' => "elastic_search\nelastic_search/*",
            'cache' => DRUPAL_NO_CACHE,
        );
    }

    return $blocks;
}


/**
 * Implements hook_block_view().
 */
function tripal_elasticsearch_block_view($delta = '')
{

    $block = array();
    $result = db_query('SELECT DISTINCT(table_name) FROM tripal_elasticsearch_search_forms');
    $table_names = array();
    foreach ($result as $record) {
        $table_names[] = $record->table_name;
    }
    // strip off 'ES_form' or 'ES_hits' to get table name
    //$table = substr($delta, 14);
    $table = str_replace('Search: ', '', $delta);
    $table = str_replace('Hits: ', '', $table);

    if (in_array($table, $table_names)) {
        $form = 'Search: ' . $table;
        $hits = 'Hits: ' . $table;

        switch ($delta) {
            case $form:
                $block['subject'] = $form;
                $block['content'] = drupal_get_form(
                    'view_search_forms_form',
                    $table
                );
                break;
            case $hits:
                $block['subject'] = $hits;
                //$block['content'] = !empty($search_hits_table) ? $search_hits_table : '';
                if (isset($_GET['_table_name']) && !empty($_GET['_table_name'])) {
                    // get elastic query data
                    $table_name = $_GET['_table_name'];
                    $index = preg_replace('/^chado./', 'chado_', $table_name);
                    $type = $table_name;
                    $field_content_pairs = $_GET[$index];

                    // run elastic search
                    $connection = (new ElasticConnection(["127.0.0.1:9201"]))->make();
                    $elastic_search = new ElasticSearch($connection);
                    $query = $elastic_search->build_search_query_from_field_content_pairs($field_content_pairs);
                    $params = $elastic_search->build_search_params($index = $index, $type = $type, $query = $query);
                    $search_res = $elastic_search->search($params);

                    // theme table elastic search results
                    //display search results in a table
                    $per_page = 10;
                    foreach (array_keys($_GET[$index]) as $field) {
                        $header[] = [
                            'data' => $field,
                            'field' => $field,
                        ];
                    }
                    $rows = $search_res;
                    $current_page = pager_default_initialize(count($rows), $per_page);
                    $chunks = array_chunk($rows, $per_page, TRUE);
                    $output = theme('table', array('header' => $header, 'rows' => $chunks[$current_page]));
                    $output .= theme('pager', array('quantity', count($rows)));

                    $block['content'] = $output;
                } else {
                    $block['content'] = '';
                }

                //$block['content'] = $_GET[$index]['name'];
                break;
        }
    } else { // display the main search box block
        switch ($delta) {
            case 'main_search_box':
                $block['subject'] = '';
                $block['content'] = drupal_get_form('main_search_box_form');
                break;
            case 'main_search_results':

                $block['subject'] = '';
                $block['content'] = $main_search_hits_table;
        }
    }


    drupal_add_js(
        drupal_get_path('module', 'tripal_elasticsearch') . '/js/hit_description.js'
    );

    return $block;
}


/**
 * implement hook_cron_queue_info()
 */
function tripal_elasticsearch_cron_queue_info()
{
    // Define N=10 queues
    $queue_N = 10;
    for ($n = 0; $n < $queue_N; $n++) {
        $queues['elastic_queue_' . $n] = array(
            'worker callback' => 'elastic_indexing_queue_item',
            //'time' => 60 * 60 * 2,  ## the amount of time drupal spends on calling the worker function.
            'time' => 115,
        );
    }

    return $queues;
}


/**
 * queue worker function
 */
function elastic_indexing_queue_item($item)
{
    $client = (new ElasticConnection(["localhost:9201"]))->make();
    $cron_queue_worker = new CronQueueWorker($client, $item);
    $cron_queue_worker->indexing();
}


/**
 * implements hook_node_update().
 * Any node updates will also update the corresponding elasticsearch docs.
 */
function tripal_elasticsearch_node_update($node)
{
    $queue_N = 10;
    // randomly assign the updated node to a queue
    $n = rand(0, $queue_N - 1);
    $queue = DrupalQueue::get('elastic_queue_' . $n);
    $nid = $node->nid;
    $sql = "SELECT title, nid FROM node WHERE nid=$nid ;";
    $item = new stdClass();
    $item->sql = $sql;
    $item->selected_table = 'index_website';
    $queue->createItem($item);
}

/**
 * implements hook_node_insert().
 * Any new nodes will be added to the  elasticsearch cron queue.
 */
function tripal_elasticsearch_node_insert($node)
{
    $queue_N = 10;
    // randomly assign the inserted node to a queue
    $n = rand(0, $queue_N - 1);
    $queue = DrupalQueue::get('elastic_queue_' . $n);
    $nid = $node->nid;
    $sql = "SELECT title, nid FROM node WHERE nid=$nid ;";
    $item = new stdClass();
    $item->sql = $sql;
    $item->selected_table = 'index_website';
    $queue->createItem($item);
}


/**
 * Implements hook_node_delete().
 * the indexed doc for the deleted node will be also deleted in elasticsearch
 */
function tripal_elasticsearch_node_delete($node)
{
    $nid = $node->nid;
    $params = array();
    $params = [
        'index' => 'index_website',
        'type' => 'index_website',
        'id' => $nid,
        'body' => ['fake_field' => 'fake document'],
    ];
    // create a fake document and index it in case that the node
    // that is being deleted doesn't exit in elasticsearch
    $client = Elasticsearch\ClientBuilder::create()->setHosts(
        variable_get('elasticsearch_hosts', array('localhost:9200'))
    )->build();
    $client->index($params);


    $params = array();
    $params = [
        'index' => 'index_website',
        'type' => 'index_website',
        'id' => $nid,
    ];
    $client->delete($params);
}

// Hide the drupal built-in search box
function tripal_elasticsearch_block_view_search_form_alter(&$data, $block)
{
    $data = NULL;
}


