<?php
/**
 * @file
 * A module that implements elasticsearch API.
 */

require drupal_get_path('module', 'tripal_elasticsearch').'/tripal_elasticsearch.api.inc';
require drupal_get_path('module', 'tripal_elasticsearch').'/includes/search_form_management.form.inc';

/**
 * Implements hook_init().
 */
function tripal_elasticsearch_init() {
	global $user;

	$library = libraries_detect('elasticsearch-php');
	if (user_access('administer tripal elasticsearch', $user)) {
		if (!$library) {
			drupal_set_message(t('The Elastichsearch-PHP library is not installed. 
				Please install this library first.'), 'warning');
		}

		// Try to load the library and check if that worked.
		$library = libraries_load('elasticsearch-php');
		if (empty($library['loaded'])) {
			drupal_set_message(t('The Elasticsearch-PHP library loading failed!'), 'warning');
		}
	}

	// set elasticsearch host variable if it doesn't exist.
	variable_get('elasticsearch_host', 'http://localhost:9200');
}



/**
 * Implements hook_menu().
 */
function tripal_elasticsearch_menu() {
	$admin_url_base = 'admin/tripal/extension/tripal_elasticsearch';
	$items[$admin_url_base] = array(
		'title' => 'Tripal Elasticsearch',
		'description' => t('Administration pages for Tripal Elasticsearch'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('elasticsearch_connection_form'),
		'access callback' => user_access('administer tripal elasticsearch'),
		'file' => 'includes/elasticsearch_connection.form.inc',
		'file_path' => drupal_get_path('module', 'tripal_elasticsearch'),
	);
	$items[$admin_url_base.'/elasticsearch_connection'] = array(
		'title' => 'Elasticsearch Connection',
		'access callback' => user_access('administer tripal elasticsearch'),
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 0,
	);
	$items[$admin_url_base.'/indices_management'] = array(
		'title' => 'Indices Management',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('tripal_elasticsearch_indexing_form'),
		'access callback' => user_access('administer tripal elasticsearch'),
		'file' => 'includes/indices_management.form.inc',
		'file_path' => drupal_get_path('module', 'tripal_elasticsearch'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 1,
	);
	$items[$admin_url_base.'/indices_management/indexing'] = array(
		'title' => 'Indexing',
		'access callback' => user_access('administer tripal elasticsearch'),
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 0,
	);
	$items[$admin_url_base.'/indices_management/delete_indices'] = array(
		'title' => 'Delete Indices',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('tripal_elasticsearch_delete_indices_form'),
		'access callback' => user_access('administer tripal elasticsearch'),
		'file' => 'includes/indices_management.form.inc',
		'file_path' => drupal_get_path('module', 'tripal_elasticsearch'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 1,
	);

	$items[$admin_url_base.'/search_form_management'] = array(
		'title' => 'Search Form Management',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('table_search_interface_building_form'),
		'access callback' => user_access('administer tripal elasticsearch'),
		'file' => 'includes/search_form_management.form.inc',
		'file_path' => drupal_get_path('module', 'tripal_elasticsearch'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 1,
	);
	$items[$admin_url_base.'/search_form_management/build_table_search_block'] = array(
		'title' => 'Build Search Block',
		'access callback' => user_access('administer tripal elasticsearch'),
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 0,
	);
	$items[$admin_url_base.'/search_form_management/alter_search_form'] = array(
		'title' => 'Alter Search Block',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('table_search_block_altering_form'),
		'access callback' => user_access('administer tripal elasticsearch'),
		'file' => 'includes/search_form_management.form.inc',
		'file_path' => drupal_get_path('module', 'tripal_elasticsearch'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 1,
	);
	$items[$admin_url_base.'/search_form_management/link_results_to_pages'] = array(
		'title' => 'Link Results to Pages',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('link_results_to_pages_form'),
		'access callback' => user_access('administer tripal elasticsearch'),
		'file' => 'includes/search_form_management.form.inc',
		'file_path' => drupal_get_path('module', 'tripal_elasticsearch'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 2,
	);


	// page to display search results.
//	$items['tripal_elasticsearch'] = array(
//		'title' => t('Search results'),
//		'page callback' => 'tripal_elasticsearch_search_results_page_callback',
//		'access callback' => true,
//	);
	return $items;
}

/**
 * Implements hook_permission().
 */
function tripal_elasticsearch_permission() {
	return array(
		'administer tripal elasticsearch' => array(
			'title' => t('Administer Tripal Elasticsearch module'),
			'description' => t('Perform administration tasks for Tripal Elasticsearch'),
		),
	);
}

/**
 * Implements hook_libraries_info().
 */
function tripal_elasticsearch_libraries_info() {
	// Register the Elasticsearch-PHP library.
	$libraries['elasticsearch-php'] = array(
		'name' => 'Elasticsearch-PHP',
		'vendor url' => 'https://www.elastic.co/guide/en/elasticsearch/client/php-api/current',
		'download url' => 'https://www.elastic.co/guide/en/elasticsearch/client/php-api/current/_quickstart.html',
		'version' => '5.0~',
		'files' => array(
			'php' => array('vendor/autoload.php'),
		),
	);
	return $libraries;
}


/**
 * Implements hook_cron_queue_info().
 */
function tripal_elasticsearch_cron_queue_info() {
	// Define N = 10 cron queues
	$queue_number = 10;
	for ($n = 1; $n < $queue_number; $n++) {
		$queues['elasticsearch_queue_'.$n] = array(
			'worker callback' => 'tripal_elasticsearch_cron_queue_worker_callback',
			'time' => 60 * 2,
		);
	}
	return $queues;
}

/**
 * Define tripal_elasticsearch_cron_queue_worker_callback function
 */
function tripal_elasticsearch_cron_queue_worker_callback($item) {

	$index_name = $item->index_name;
	$index_type = $item->index_type;
	$website_or_table = $item->website_or_table;
	$field_mapping_types = $item->field_mapping_types;
	$sql = $item->sql;


	if ($item->website_or_table == 'website') {
		// Index website.
		$result = db_query($sql)->fetchAll();
		$params = array();
		foreach ($result as $record) {
			$nid = $record->nid;
			$node_title = $record->title;
			$node_type = $record->type;

			$params = array(
				'index' => $index_name,
				'type' => $index_type,
				'id' => $nid,
				'body' => array(
					'nid' => $nid,
					'title' => $node_title,
					'type' => $node_type,
					'content' => get_node_content_by_nid(
						$nid = $nid,
						$base_url = variable_get('website_base_url'),
						$node_title = $node_title
					)
				),
			);

			try{
				libraries_load('elasticsearch-php');
				$elasticsearch_host = variable_get('elasticsearch_host');
				$client = Elasticsearch\ClientBuilder::create()->setHosts(array($elasticsearch_host))->build();
				$response = $client->index($params);
				watchdog('tripal_elasticsearch', 'A page has been indexed by Tripal Elasticsearch.');
			} catch (\Exception $e) {
				$message = $e->getMessage();
				watchdog('tripal_elasticsearch', $message, $severity = WATCHDOG_WARNING);
			}
		}
	} else {
		// Index table.
		$result = db_query($sql)->fetchAll();
		$params = array();
		foreach ($result as $record) {
			$params = array(
				'index' => $index_name,
				'type' => $index_type,
				'body' => $record,
			);

			try{
				libraries_load('elasticsearch-php');
				$elasticsearch_host = variable_get('elasticsearch_host');
				$client = Elasticsearch\ClientBuilder::create()->setHosts(array($elasticsearch_host))->build();
				$response = $client->index($params);
				watchdog('tripal_elasticsearch', 'A table row has been indexed by Tripal Elasticsearch.');
			} catch (\Exception $e) {
				$message = $e->getMessage();
				watchdog('tripal_elasticsearch', $message, $severity = WATCHDOG_WARNING);
			}
		}
	}
}


/**
 * Implements hook_block_info().
 */
function tripal_elasticsearch_block_info() {
	$blocks = array();
	// Define block for website search box.
	$blocks['elasticsearch_website_search_box'] = array(
		'info' => t('Tripal Elasticsearch website search box'),
		'cache' => DRUPAL_NO_CACHE,
	);

	// Define block for website search results by category.
	$blocks['website_search_category'] = array(
		'info' => t('Tripal Elasticsearch website search category'),
		'cache' => DRUPAL_NO_CACHE,
		'status' => 1,
		'region' => 'sidebar_first',
		'visibility' => BLOCK_VISIBILITY_LISTED,
		'page' => "tripal_elasticsearch/search_website\ntripal_elasticsearch/search_website/*",
	);

	// Define blocks for table search forms.
	$sql = "SELECT index_name FROM {tripal_elasticsearch}";
	$index_names = db_query($sql)->fetchCol('index_name');
	if (!empty($index_names)) {
		foreach ($index_names as $index_name) {
			$blocks['tes_'.$index_name] = array(
				'info' => t('Search block for index: '.$index_name),
				'cache' => DRUPAL_NO_CACHE,
			);
		}
	}

	return $blocks;
}

/**
 * Implements hook_block_view().
 */
function tripal_elasticsearch_block_view($delta = '') {
	$block = array();
	// Get index name from table search block name.
	if (preg_match('/^(tes_)/', $delta)) {
		$index_name = preg_replace('/^(tes_)/', '', $delta);
		// use index name obtained from block name and query the database.
		$sql = "SELECT DISTINCT index_name FROM {tripal_elasticsearch} WHERE index_name = :index_name";
		$result = db_query($sql, array(':index_name'=>$index_name))->fetchCol('index_name');
		// if query result is not empty, display the block.
		if (!empty($result)) {
			$block['subject'] = t('Search block form for index: <b>'.$index_name.'</b>');
			$block['content'] = drupal_get_form('tripal_elasticsearch_build_search_block_form', $index_name);
		}
	} else {
		switch ($delta){
			case 'elasticsearch_website_search_box':
				$block['subject'] = '';
				$block['content'] = drupal_get_form('website_search_box_form');
				break;
			case 'website_search_category':
				$block['subject'] = '';
				if(isset($_GET['q'])) {
					$path = explode('/', $_GET['q']);
					if ($path[0] == 'tripal_elasticsearch' && $path[1] == 'search_website')
						$keyword = isset($path[2]) ? $path[2]: '';
						$block['content'] = get_website_search_results_category_list($keyword);
				} else {
					$block['content'] = '';
				}
				break;
		}
	}

	return $block;
}

/**
 * Implements hook_menu_alter().
 */
function tripal_elasticsearch_menu_alter(&$items) {
	// Page to display website search results for all node types.
	$items['tripal_elasticsearch/search_website'] = array(
		'title' => t('Search results'),
		'page callback' => 'tripal_elasticsearch_search_results_page_callback',
		'access callback' => TRUE,
	);

	// Page to display website search result for a specific node type.
	$items['tripal_elasticsearch/search_website/%/%'] = array(
		'title' => t('Search results'),
		'page callback' => 'tripal_elasticsearch_search_results_category_page_callback',
		'page arguments' => array(2, 3),
//		'access arguments' => array(TRUE),
		'access callback' => user_access('access content'),
	);

	// Page to display table search result.
	$items['tripal_elasticsearch/search_table'] = array(
		'title' => '',
		'page callback' => 'tripal_elasticsearch_table_search_page_callback',
//		'access arguments' => array(TRUE),
		'access callback' => user_access('access content'),
	);
	return $items;
}

/**
 * tripal_elasticsearch_search_results_page_callback
 */
function tripal_elasticsearch_search_results_page_callback($arg1='') {
	// $arg1 is empty by default. $arg1 has be to set, otherwise it will
	// have a argument missing error when visit page 'tripal_elasticsearch/search_website'.
	if (empty($arg1)) {
		return 'Please enter some content into the search box and click the search button.';
	}
	$keyword = $arg1;

	// Build search params.
	$params = build_website_search_params(
		$search_content = _remove_special_chars($keyword)
	);

	// Run Elasticsearch.
	try{
		$search_result = tripal_elasticsearch_search_website($params);

		// grab page title and highlight content from search results.
		$results = array();
		foreach ($search_result as $item) {
			$results[] = array(
				'nid' => $item['nid'],
				'title' => $item['title'],
				'highlight' => $item['highlight'],
			);
		}

		$output = '';
		foreach ($results as $item) {
			$output .= '<h3>'.l($item['title'], 'node/'.$item['nid']).'</h3>';
			$output .= '<p>'.$item['highlight'].'</p>';
		}

	} catch (\Exception $e) {
		return 'Searching is not available. Please try later.';
	}


	if (count($results) == 0) {
		return "Your search -<b>".$keyword."</b>- didn't match any content.";
	}
	return get_website_search_result_table($results);
}



/**
 * tripal_elasticsearch_search_results_category_page_callback
 */
function tripal_elasticsearch_search_results_category_page_callback($arg1, $arg2) {
	$node_type = $arg1;
	$keyword = $arg2;

	// Build search params.
	$params = build_website_search_params(
		$search_content = _remove_special_chars($keyword),
		$node_type = $node_type
	);

	// Run Elasticsearch.
	try{
		$search_result = tripal_elasticsearch_search_website($params);

		// grab page title and highlight content from search results.
		$results = array();
		foreach ($search_result as $item) {
			$results[] = array(
				'nid' => $item['nid'],
				'title' => $item['title'],
				'highlight' => $item['highlight'],
			);
		}

		$output = '';
		foreach ($results as $item) {
			$output .= '<h3>'.l($item['title'], 'node/'.$item['nid']).'</h3>';
			$output .= '<p>'.$item['highlight'].'</p>';
		}
	} catch (\Exception $e) {
		return 'Searching is not available. Please try later.';
	}

	if (count($results) == 0) {
		return "Your search -<b>".$keyword."</b>- didn't match any content.";
	}
	return get_website_search_result_table($results);
}


/**
 * tripal_elasticsearch_table_search_page_callback
 */
function tripal_elasticsearch_table_search_page_callback() {
	// add js and css files
	drupal_add_css(drupal_get_path('module', 'tripal_elasticsearch').'/css/jquery.dataTables.min.css');
	drupal_add_js(drupal_get_path('module', 'tripal_elasticsearch').'/js/jquery.dataTables.min.js');
	drupal_add_js(drupal_get_path('module', 'tripal_elasticsearch').'/js/table_search_results_datatable.js');


	if (!isset($_GET['index_name'])) {
		return '';
	}
	$index_name = $_GET['index_name'];
	$select_window = $_GET['select_window'];
	$from = 1000 * ($select_window - 1);
	$sql = "SELECT * FROM {tripal_elasticsearch} WHERE index_name = :index_name";
	$result = db_query($sql, array(':index_name'=>$index_name))->fetchAll();
	// return an empty page if no search block is available in database.
	if (empty($result)) {
		return '';
	}
	$index_fields = array();
	foreach ($result as $record) {
		if (!empty($_GET[$record->index_field])) {
			$index_fields[$record->index_field] = $_GET[$record->index_field];
		}
	}
	$index_type = $record->table_name;

	// Build search query for table search.
	$query = build_search_query_from_field_content_pairs($index_fields);
	// Build table search params.
	$params = build_table_search_params($index = $index_name, $type = $index_type, $query, $from = $from);
	// Run Elasticsearch
	$search_results = array();
	try {
		$search_results = tripal_elasticsearch_search_table($params);
	} catch (\Exception $e) {

	}

	if (count($search_results) == 0) {
		return '<font color="blue">Your search did not match any record.</font>';
	}

	// Download search results.
	$save_to_file = isset($_GET['save_to_file']) ? $_GET['save_to_file']:'';
	if ( $save_to_file == 'yes') {
		// Build search query for table search.
		$query = build_search_query_from_field_content_pairs($index_fields);
		// Build table search params.
		$params = build_table_search_params($index = $index_name, $type = $index_type, $query);
		unset($params['size']);
		unset($params['from']);
		try{
			libraries_load('elasticsearch-php');
			$elasticsearch_host = variable_get('elasticsearch_host');
			$client = Elasticsearch\ClientBuilder::create()->setHosts(array($elasticsearch_host))->build();
			$count = $client->count($params)['count'];
			$window_range = range(1, ceil($count/1000));
			$count = '<font color="red"><b>'.$count.'</b> results match your search.</font>';
		} catch (\Exception $e) {
			drupal_set_message($e->getMessage(), 'warning');
		}
		// loop through window and write returned search results into a file.
		$directory = 'public://table_search_results';
		file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
		$temp_file = drupal_tempnam($directory, 'search_results_').'.csv';
		$params['size'] = 1000;
		foreach ($window_range as $window) {
			$params['from'] = 1000 * ($window - 1);
			$result = tripal_elasticsearch_search_table($params);
			foreach ($result as $row) {
				$line = implode(',', $row)."\n";
				file_put_contents($temp_file, $line, FILE_APPEND);
			}
		}

//		drupal_add_http_header('Content-Type', 'text/csv; utf-8');
//		file_transfer($temp_file);
		$output = '<div id="table_search_results_datatable">';
		$output .= l(t('Download search results'), file_create_url($temp_file));
		$output .= get_table_search_result_table($search_results, $index_name);
		$output .= '</div>';
		return $output;
	}

	$output = '<div id="table_search_results_datatable">';
	$output .= get_table_search_result_table($search_results, $index_name);
	$output .= '</div>';

	return $output;
}


/**
 * Implements hook_node_update().
 */
function tripal_elasticsearch_node_update ($node) {
	$item = new stdClass();

	$item->index_name = 'website';
	$item->index_type = 'website';
	$item->website_or_table = 'website';
	$item->field_mapping_types = array(
		'nid' => 'integer',
		'type' => 'string',
		'title' => 'string',
		'content' => 'string',
	);
	$nid = $node->nid;
	$item->sql = "SELECT nid,title,type FROM {node} WHERE nid = $node->nid";

	// randomly assign the updated node to a cron queue
	$id = rand(1, 10);
	$cron_queue = DrupalQueue::get('elasticsearch_queue_'.$id);
	$cron_queue->createItem($item);
}


/**
 * Implements hook_node_insert()
 */
function tripal_elasticsearch_node_inset ($node) {
	$item = new stdClass();

	$item->index_name = 'website';
	$item->index_type = 'website';
	$item->website_or_table = 'website';
	$item->field_mapping_types = array(
		'nid' => 'integer',
		'type' => 'string',
		'title' => 'string',
		'content' => 'string',
	);
	$nid = $node->nid;
	$item->sql = "SELECT nid,title,type FROM {node} WHERE nid = $node->nid";

	// randomly assign the updated node to a cron queue
	$id = rand(1, 10);
	$cron_queue = DrupalQueue::get('elasticsearch_queue_'.$id);
	$cron_queue->createItem($item);
}


/**
 * Implements hook_node_delete().
 */
function tripal_elasticsearch_node_delete($node) {
	$params = array(
		'index' => 'website',
		'type' => 'website',
		'id' => $node->nid,
	);

	try{
		libraries_load('elasticsearch-php');
		$elasticsearch_host = variable_get('elasticsearch_host');
		$client = Elasticsearch\ClientBuilder::create()->setHosts(array($elasticsearch_host))->build();
		$response = $client->delete($params);
		$message = 'Removed document '.$node->nid.'from index "website"';
		watchdog('tripal_elasticsearch', $message);
	} catch (\Exception $e) {
		$message = $e->getMessage().' Failed to delete indexed node '.$node->nid;
		watchdog('tripal_elasticsearch', $message, $severity = WATCHDOG_WARNING);
	}
}