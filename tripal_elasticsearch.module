<?php
/**
 * @file
 * A module that implements elasticsearch API.
 */

require drupal_get_path('module', 'tripal_elasticsearch').'/tripal_elasticsearch.api.inc';
require drupal_get_path('module', 'tripal_elasticsearch').'/includes/search_form_management.form.inc';

/**
 * Implements hook_init().
 */
function tripal_elasticsearch_init() {
	global $user;

	$library = libraries_detect('elasticsearch-php');
	if (user_access('administer tripal elasticsearch', $user)) {
		if (!$library) {
			drupal_set_message(t('The Elastichsearch-PHP library is not installed. 
				Please install this library first.'), 'warning');
		}

		// Try to load the library and check if that worked.
		$library = libraries_load('elasticsearch-php');
		if (empty($library['loaded'])) {
			drupal_set_message(t('The Elasticsearch-PHP library loading failed!'), 'warning');
		}
	}

	// set elasticsearch host variable if it doesn't exist.
	variable_get('elasticsearch_host', 'http://localhost:9200');
}



/**
 * Implements hook_menu().
 */
function tripal_elasticsearch_menu() {
	$admin_url_base = 'admin/tripal/extension/tripal_elasticsearch';
	$items[$admin_url_base] = array(
		'title' => 'Tripal Elasticsearch',
		'description' => t('Administration pages for Tripal Elasticsearch'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('elasticsearch_connection_form'),
		'access callback' => user_access('administer tripal elasticsearch'),
		'file' => 'includes/elasticsearch_connection.form.inc',
		'file_path' => drupal_get_path('module', 'tripal_elasticsearch'),
	);
	$items[$admin_url_base.'/elasticsearch_connection'] = array(
		'title' => 'Elasticsearch Connection',
		'access callback' => user_access('administer tripal elasticsearch'),
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 0,
	);
	$items[$admin_url_base.'/indices_management'] = array(
		'title' => 'Indices Management',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('tripal_elasticsearch_indexing_form'),
		'access callback' => user_access('administer tripal elasticsearch'),
		'file' => 'includes/indices_management.form.inc',
		'file_path' => drupal_get_path('module', 'tripal_elasticsearch'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 1,
	);
	$items[$admin_url_base.'/indices_management/indexing'] = array(
		'title' => 'Indexing',
		'access callback' => user_access('administer tripal elasticsearch'),
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 0,
	);
	$items[$admin_url_base.'/indices_management/delete_indices'] = array(
		'title' => 'Delete Indices',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('tripal_elasticsearch_delete_indices_form'),
		'access callback' => user_access('administer tripal elasticsearch'),
		'file' => 'includes/indices_management.form.inc',
		'file_path' => drupal_get_path('module', 'tripal_elasticsearch'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 1,
	);

	$items[$admin_url_base.'/search_form_management'] = array(
		'title' => 'Search Form Management',
		'access callback' => user_access('administer tripal elasticsearch'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 3,
	);

	// page to display search results.
//	$items['tripal_elasticsearch'] = array(
//		'title' => t('Search results'),
//		'page callback' => 'tripal_elasticsearch_search_results_page_callback',
//		'access callback' => true,
//	);
	return $items;
}

/**
 * Implements hook_permission().
 */
function tripal_elasticsearch_permission() {
	return array(
		'administer tripal elasticsearch' => array(
			'title' => t('Administer Tripal Elasticsearch module'),
			'description' => t('Perform administration tasks for Tripal Elasticsearch'),
		),
	);
}

/**
 * Implements hook_libraries_info().
 */
function tripal_elasticsearch_libraries_info() {
	// Register the Elasticsearch-PHP library.
	$libraries['elasticsearch-php'] = array(
		'name' => 'Elasticsearch-PHP',
		'vendor url' => 'https://www.elastic.co/guide/en/elasticsearch/client/php-api/current',
		'download url' => 'https://www.elastic.co/guide/en/elasticsearch/client/php-api/current/_quickstart.html',
		'version' => '5.0~',
		'files' => array(
			'php' => array('vendor/autoload.php'),
		),
	);
	return $libraries;
}


/**
 * Implements hook_cron_queue_info().
 */
function tripal_elasticsearch_cron_queue_info() {
	// Define N = 10 cron queues
	$queue_number = 10;
	for ($n = 1; $n < $queue_number; $n++) {
		$queues['elasticsearch_queue_'.$n] = array(
			'worker callback' => 'tripal_elasticsearch_cron_queue_worker_callback',
			'time' => 60 * 2,
		);
	}
	return $queues;
}

/**
 * Define tripal_elasticsearch_cron_queue_worker_callback function
 */
function tripal_elasticsearch_cron_queue_worker_callback($item) {

	$index_name = $item->index_name;
	$index_type = $item->index_type;
	$website_or_table = $item->website_or_table;
	$field_mapping_types = $item->field_mapping_types;
	$sql = $item->sql;


	if ($item->website_or_table == 'website') {
		// Index website.
		$result = db_query($sql)->fetchAll();
		$params = array();
		foreach ($result as $record) {
			$nid = $record->nid;
			$node_title = $record->title;
			$node_type = $record->type;

			$params = array(
				'index' => $index_name,
				'type' => $index_type,
				'id' => $nid,
				'body' => array(
					'nid' => $nid,
					'title' => $node_title,
					'type' => $node_type,
					'content' => get_node_content_by_nid(
						$nid = $nid,
						$base_url = "http://127.0.0.1:80",
						$node_title = $node_title
					)
				),
			);

			try{
				libraries_load('elasticsearch-php');
				$elasticsearch_host = variable_get('elasticsearch_host');
				$client = Elasticsearch\ClientBuilder::create()->setHosts(array($elasticsearch_host))->build();
				$response = $client->index($params);
				watchdog('tripal_elasticsearch', 'A page has been indexed by Tripal Elasticsearch.');
			} catch (\Exception $e) {
				$message = $e->getMessage();
				watchdog('tripal_elasticsearch', $message, $severity = WATCHDOG_WARNING);
			}
		}
	} else {
		// Index table.
		$result = db_query($sql)->fetchAll();
		$params = array();
		foreach ($result as $record) {
			$params = array(
				'index' => $index_name,
				'type' => $index_type,
				'body' => $record,
			);

			try{
				libraries_load('elasticsearch-php');
				$elasticsearch_host = variable_get('elasticsearch_host');
				$client = Elasticsearch\ClientBuilder::create()->setHosts(array($elasticsearch_host))->build();
				$response = $client->index($params);
				watchdog('tripal_elasticsearch', 'A table row has been indexed by Tripal Elasticsearch.');
			} catch (\Exception $e) {
				$message = $e->getMessage();
				watchdog('tripal_elasticsearch', $message, $severity = WATCHDOG_WARNING);
			}
		}
	}
}


/**
 * Implements hook_block_info().
 */
function tripal_elasticsearch_block_info() {
	$blocks = array();
	// Define block for website search box.
	$blocks['elasticsearch_website_search_box'] = array(
		'info' => t('Tripal Elasticsearch website search box'),
		'cache' => DRUPAL_NO_CACHE,
	);

	// Define block for website search results by category.
	$blocks['website_search_category'] = array(
		'info' => t('Tripal Elasticsearch website search category'),
		'cache' => DRUPAL_NO_CACHE,
		'status' => 1,
		'region' => 'sidebar_first',
		'visibility' => 'BLOCK_VISIBILITY_LISTED',
		'page' => 'tripal_elasticsearch/search_website/*',
	);

	return $blocks;
}

/**
 * Implements hook_block_view().
 */
function tripal_elasticsearch_block_view($delta = '') {
	$block = array();
	switch ($delta){
		case 'elasticsearch_website_search_box':
			$block['subject'] = '';
			$block['content'] = drupal_get_form('website_search_box_form');
			break;
		case 'website_search_category':
			$block['subject'] = '';
			$block['content'] = get_website_search_results_category_list();
			break;
	}

	return $block;
}

/**
 * Implements hook_menu_alter().
 */
function tripal_elasticsearch_menu_alter(&$items) {
	// Page to display website search results for all node types.
	$items['tripal_elasticsearch/search_website'] = array(
		'title' => t('Search results'),
		'page callback' => 'tripal_elasticsearch_search_results_page_callback',
		'access callback' => TRUE,
	);

	// Page to display website search result for a specific node type.
	$items['tripal_elasticsearch/search_website/%/%'] = array(
		'title' => t('Search results'),
		'page callback' => 'tripal_elasticsearch_search_results_category_page_callback',
		'page arguments' => array(2, 3),
		'access arguments' => array(TRUE),
	);
	return $items;
}

/**
 * tripal_elasticsearch_search_results_page_callback
 */
function tripal_elasticsearch_search_results_page_callback($arg1) {
	$keyword = $arg1;

	// Build search params.
	$params = build_website_search_params(
		$search_content = _remove_special_chars($keyword)
	);

	// Run Elasticsearch.
	try{
		$search_result = tripal_elasticsearch_search_website($params);
	} catch (\Exception $e) {
		$message = $e->getMessage();
		drupal_set_message(t($message), 'warning');
	}

	// grab page title and highlight content from search results.
	$results = array();
	foreach ($search_result as $item) {
		$results[] = array(
			'nid' => $item['nid'],
			'title' => $item['title'],
			'highlight' => $item['highlight'],
		);
	}


	$output = '';
	foreach ($results as $item) {
		$output .= '<h3>'.l($item['title'], 'node/'.$item['nid']).'</h3>';
		$output .= '<p>'.$item['highlight'].'</p>';
	}

	return get_website_search_result_table($results);
}



/**
 * tripal_elasticsearch_search_results_category_page_callback
 */
function tripal_elasticsearch_search_results_category_page_callback($arg1, $arg2) {
	$node_type = $arg1;
	$keyword = $arg2;

	// Build search params.
	$params = build_website_search_params(
		$search_content = _remove_special_chars($keyword),
		$node_type = $node_type
	);

	// Run Elasticsearch.
	try{
		$search_result = tripal_elasticsearch_search_website($params);
	} catch (\Exception $e) {
		$message = $e->getMessage();
		drupal_set_message(t($message), 'warning');
	}

	// grab page title and highlight content from search results.
	$results = array();
	foreach ($search_result as $item) {
		$results[] = array(
			'nid' => $item['nid'],
			'title' => $item['title'],
			'highlight' => $item['highlight'],
		);
	}

	$output = '';
	foreach ($results as $item) {
		$output .= '<h3>'.l($item['title'], 'node/'.$item['nid']).'</h3>';
		$output .= '<p>'.$item['highlight'].'</p>';
	}

	return get_website_search_result_table($results);
}


/**
 * Implements hook_theme().
 * Register templates to display search results.
 */
function tripal_elasticsearch_theme($existing, $type, $theme, $path) {
//	$theme_hooks['website_search_results'] = array(
//		'variables' => array('website_search_results' => NULL),
//		'template' => 'website-search-results',
//		'path' => drupal_get_path('module', 'tripal_elasticsearch').'/templates',
//	);
//
//	return $theme_hooks;
}

