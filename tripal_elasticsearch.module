<?php

/**
 * @file
 * A module that implements elasticsearch API.
 */

require drupal_get_path('module', 'tripal_elasticsearch') . '/includes/Elasticsearch/ESInstance.php';
require drupal_get_path('module', 'tripal_elasticsearch') . '/includes/Elasticsearch/ESResponse.php';
require drupal_get_path('module', 'tripal_elasticsearch') . '/includes/Elasticsearch/ESRequest.php';
require drupal_get_path('module', 'tripal_elasticsearch') . '/tripal_elasticsearch.api.inc';
require drupal_get_path('module', 'tripal_elasticsearch') . '/includes/search_form_management.form.inc';
require drupal_get_path('module', 'tripal_elasticsearch') . '/includes/search_box.form.inc';
require drupal_get_path('module', 'tripal_elasticsearch') . '/includes/indices_management.form.inc';
require drupal_get_path('module', 'tripal_elasticsearch') . '/tripal_elasticsearch.ws.inc';

/**
 * Implements hook_init().
 */
function tripal_elasticsearch_init() {
  global $user;

  $library = libraries_detect('elasticsearch-php');
  if (user_access('administer tripal elasticsearch', $user)) {
    if (!$library) {
      drupal_set_message(t('The Elastichsearch-PHP library is not installed.
				Please install this library first.'), 'warning');
    }

    // Try to load the library and check if that worked.
    $library = libraries_load('elasticsearch-php');
    if (empty($library['loaded'])) {
      drupal_set_message(t('The Elasticsearch-PHP library loading failed!'), 'warning');
    }
  }

  // set elasticsearch host variable if it doesn't exist.
  variable_get('elasticsearch_host', 'http://localhost:9200');
}

/**
 * Implements hook_menu().
 */
function tripal_elasticsearch_menu() {
  $admin_url_base = 'admin/tripal/extension/tripal_elasticsearch';
  $items[$admin_url_base] = [
    'title' => 'Tripal Elasticsearch',
    'description' => t('Administration pages for Tripal Elasticsearch'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['elasticsearch_connection_form'],
    'access arguments' => ['administer tripal elasticsearch'],
    'file' => 'includes/elasticsearch_connection.form.inc',
    'file_path' => drupal_get_path('module', 'tripal_elasticsearch'),
  ];
  $items[$admin_url_base . '/elasticsearch_connection'] = [
    'title' => 'Elasticsearch Connection',
    'access arguments' => ['administer tripal elasticsearch'],
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  ];

  // Create routing for editing and deleting individual remote entries
  $items[$admin_url_base . '/edit/%'] = [
    'title' => t('Edit Remote Server'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['remote_edit_confirm', 5],
    'access arguments' => ['administer tripal elasticsearch'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/elasticsearch_connection.form.inc',
    'file_path' => drupal_get_path('module', 'tripal_elasticsearch'),
  ];

  $items[$admin_url_base . '/delete/%'] = [
    'title' => t('Delete Remote Server'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['remote_delete_confirm', 5],
    'access arguments' => ['administer tripal elasticsearch'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/elasticsearch_connection.form.inc',
    'file_path' => drupal_get_path('module', 'tripal_elasticsearch'),
  ];

  $items[$admin_url_base . '/indices_management'] = [
    'title' => 'Indices Management',
    'page callback' => 'tripal_elasticsearch_indices_list_page',
    //'page arguments' => ['tripal_elasticsearch_indexing_form'],
    'access arguments' => ['administer tripal elasticsearch'],
    'file' => 'includes/indices_management.form.inc',
    'file_path' => drupal_get_path('module', 'tripal_elasticsearch'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  ];
  /*$items[$admin_url_base . '/indices_management/indexing'] = [
    'title' => 'Indexing',
    'access arguments' => ['administer tripal elasticsearch'],
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  ];*/
  $items[$admin_url_base . '/indices_management/delete/%'] = [
    'title' => 'Delete Indices',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_elasticsearch_index_delete_confirm', 6],
    'access arguments' => ['administer tripal elasticsearch'],
    'file' => 'includes/indices_management.form.inc',
    'file_path' => drupal_get_path('module', 'tripal_elasticsearch'),
    'type' => MENU_CALLBACK,
    'weight' => 1,
  ];

  $items[$admin_url_base . '/search_form_management'] = [
    'title' => 'Search Form Management',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['table_search_interface_building_form'],
    'access arguments' => ['administer tripal elasticsearch'],
    'file' => 'includes/search_form_management.form.inc',
    'file_path' => drupal_get_path('module', 'tripal_elasticsearch'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  ];

  // Cross site search page
  $items['elasticsearch/cross-site'] = [
    'Title' => 'Cross Site Search',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_elasticsearch_cross_site_search_form'],
    'access arguments' => ['access content'],
    'type' => MENU_NORMAL_ITEM,
  ];

  // Tripal Elasticsearch API Endpoints

  $items['elasticsearch/api/v1/status'] = [
    'title' => 'Test',
    'page callback' => 'tripal_elasticsearch_api_v1_status',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];

  $items['elasticsearch/api/v1/get-status/%'] = [
    'title' => 'Test',
    'page callback' => 'tripal_elasticsearch_api_v1_get_status',
    'access arguments' => ['access content'],
    'page arguments' => [4],
    'type' => MENU_CALLBACK,
  ];

  $items['elasticsearch/api/v1/search/%'] = [
    'title' => 'Test',
    'page callback' => 'tripal_elasticsearch_api_v1_search',
    'access arguments' => ['access content'],
    'page arguments' => [4],
    'type' => MENU_CALLBACK,
  ];

  $items['elasticsearch/api/v1/local-search'] = [
    'title' => 'Test',
    'page callback' => 'tripal_elasticsearch_api_v1_local_search',
    'access arguments' => ['access content'],
    'page arguments' => [4],
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Implements hook_permission().
 */
function tripal_elasticsearch_permission() {
  return [
    'administer tripal elasticsearch' => [
      'title' => t('Administer Tripal Elasticsearch module'),
      'description' => t('Perform administration tasks for Tripal Elasticsearch'),
    ],
  ];
}

/**
 * Implements hook_libraries_info().
 */
function tripal_elasticsearch_libraries_info() {
  // Register the Elasticsearch-PHP library.
  $libraries['elasticsearch-php'] = [
    'name' => 'Elasticsearch-PHP',
    'vendor url' => 'https://www.elastic.co/guide/en/elasticsearch/client/php-api/current',
    'download url' => 'https://www.elastic.co/guide/en/elasticsearch/client/php-api/current/_quickstart.html',
    'version' => '5.0~',
    'files' => [
      'php' => ['vendor/autoload.php'],
    ],
  ];

  return $libraries;
}

/**
 * Implements hook_cron_queue_info().
 */
function tripal_elasticsearch_cron_queue_info() {
  // Define N = 10 cron queues
  $queues = [];
  $queue_number = 10;
  for ($n = 1; $n <= $queue_number; $n++) {
    $queues['elasticsearch_queue_' . $n] = [
      'worker callback' => 'tripal_elasticsearch_cron_queue_worker_callback',
      'time' => 60 * 2,
    ];
  }
  return $queues;
}

/**
 * Define tripal_elasticsearch_cron_queue_worker_callback function
 *
 * @return void
 */
function tripal_elasticsearch_cron_queue_worker_callback($item) {
  $index_name = $item->index_name;
  $index_type = $item->index_type;
  $sql = $item->sql;
  $base_url = variable_get('website_base_url');
  $result = db_query($sql)->fetchAll();

  // Init ES
  try {
    $es = new ESInstance();
  } catch (Exception $exception) {
    watchdog('tripal_elasticsearch', 'Elasticsearch could not be instantiated');
    return;
  }

  if ($item->type == 'entities') {
    foreach ($result as $record) {
      $entity_id = $record->entity_id;
      $entity_title = $record->title;
      $bundle_label = $record->bundle_label;

      $body = [
        'entity_id' => $entity_id,
        'title' => $entity_title,
        'bundle_label' => $bundle_label,
        'content' => tripal_elasticsearch_get_page_content_by_id($entity_id, $base_url, $entity_title, FALSE),
      ];

      try {
        $es->createEntry($index_name, $index_type, $entity_id, $body);
      } catch (\Exception $e) {
        watchdog('tripal_elasticsearch', $e->getMessage(), $severity = WATCHDOG_WARNING);
      }
    }
  }
  elseif ($item->type == 'website') {
    // Index website.
    foreach ($result as $record) {
      $nid = $record->nid;
      $node_title = $record->title;
      $node_type = $record->type;

      $body = [
        'nid' => $nid,
        'title' => $node_title,
        'type' => $node_type,
        'content' => tripal_elasticsearch_get_page_content_by_id($nid, variable_get('website_base_url'), $node_title, TRUE),
      ];

      try {
        $es->createEntry($index_name, $index_type, $nid, $body);
      } catch (\Exception $e) {
        watchdog('tripal_elasticsearch', $e->getMessage(), WATCHDOG_WARNING);
      }
    }
  }
  else {
    // Index table.
    foreach ($result as $record) {
      try {
        $es->createEntry($index_name, $index_type, FALSE, $record);
      } catch (\Exception $e) {
        watchdog('tripal_elasticsearch', $e->getMessage(), WATCHDOG_WARNING);
      }
    }
  }
}

/**
 * Implements hook_block_info().
 */
function tripal_elasticsearch_block_info() {
  $blocks = [];
  // Define block for website search box.
  $blocks['elasticsearch_website_search_box'] = [
    'info' => t('Tripal Elasticsearch website search box'),
    'status' => 1,
    'region' => 'header',
    'cache' => DRUPAL_NO_CACHE,
  ];

  // Define block for website search results by category.
  $blocks['website_search_category'] = [
    'info' => t('Tripal Elasticsearch website search category'),
    'cache' => DRUPAL_NO_CACHE,
    'status' => 1,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'page' => "tripal_elasticsearch/search_website\ntripal_elasticsearch/search_website/*",
  ];

  // Define blocks for table search forms.
  $sql = "SELECT index_name FROM {tripal_elasticsearch}";
  $index_names = db_query($sql)->fetchCol('index_name');
  if (!empty($index_names)) {
    foreach ($index_names as $index_name) {
      $blocks['tes_' . $index_name] = [
        'info' => t('Search block for index: ' . $index_name),
        'cache' => DRUPAL_NO_CACHE,
      ];
    }
  }

  return $blocks;
}

function tripal_elasticsearch_build_download_url() {
  $query = ['query' => $_GET];
  if (array_key_exists('q', $query['query'])) {
    unset($query['query']['q']);
  }

  return url('tripal_elasticsearch/download/results', $query);
}

/**
 * Implements hook_block_view().
 *
 * @param $delta
 */
function tripal_elasticsearch_block_view($delta = '') {
  $block = [];
  // Get index name from table search block name.
  if (preg_match('/^(tes_)/', $delta)) {
    $index_name = preg_replace('/^(tes_)/', '', $delta);

    // Use index name obtained from block name and query the database.
    $sql = "SELECT DISTINCT index_name FROM {tripal_elasticsearch} WHERE index_name = :index_name";
    $result = db_query($sql, [':index_name' => $index_name])->fetchCol('index_name');

    // If query result is not empty, display the block.
    if (!empty($result)) {
      $block['subject'] = t('Search block form for index: <b>' . $index_name . '</b>');

      $page['form'] = drupal_get_form('tripal_elasticsearch_build_search_block_form', $index_name);
      if (isset($_GET['op'])) {
        drupal_add_js(drupal_get_path('module', 'tripal_elasticsearch') . '/js/table_search_results_datatable.js');
        $search_results = tripal_elasticsearch_paginate(10);
        $markup = get_table_search_result_table($search_results['results'], $index_name, $search_results['total']);
        $page_number = $search_results['page'] + 1;
        $total_pages = ceil($search_results['total'] / 10);

        $page['download'] = [
          '#markup' => '<p>' . '<a href="' . tripal_elasticsearch_build_download_url() . '" target="_blank">Download all results in csv format</a>' . '</p>',
        ];
        $page['count'] = [
          '#markup' => "<div style='font-weight: bold; margin: 10px 0'>" . "<p style='float: right'>Showing page {$page_number} out of {$total_pages} pages.</p>" . "<p>Found {$search_results['total']} results.</p>" . "</div>",
        ];
        $page['results'] = [
          '#markup' => $markup,
        ];
      }
      $block['content'] = $page;
    }
  }
  else {
    switch ($delta) {
      case 'elasticsearch_website_search_box':
        $block['subject'] = '';
        $block['content'] = drupal_get_form('website_search_box_form');
        break;
      case 'website_search_category':
        $block['subject'] = '';
        if (isset($_GET['q'])) {
          $path = explode('/', $_GET['q']);
          if ($path[0] == 'tripal_elasticsearch' && $path[1] == 'search_website') {
            switch (count($path)) {
              case '3':
                $keyword = $path[2];
                $block['content'] = get_website_search_results_category_list($keyword);
                break;
              case '4':
                $keyword = $path[3];
                $block['content'] = get_website_search_results_category_list($keyword);
                break;
              default:
                $block['content'] = '';
                break;
            }
          }
        }
        break;
    }
  }

  return $block;
}

/**
 * Implements hook_menu_alter().
 */
function tripal_elasticsearch_menu_alter(&$items) {
  // Page to display website search results for all node types.
  $items['tripal_elasticsearch/search_website'] = [
    'title' => t('Search results'),
    'page callback' => 'tripal_elasticsearch_search_results_page_callback',
    'access callback' => TRUE,
  ];

  // Page to display website search result for a specific node type.
  $items['tripal_elasticsearch/search_website/%/%'] = [
    'title' => t('Search results'),
    'page callback' => 'tripal_elasticsearch_search_results_category_page_callback',
    'page arguments' => [2, 3],
    'access callback' => user_access('access content'),
  ];

  // Page to display table search result.
  $items['tripal_elasticsearch/search_table'] = [
    'title' => '',
    'page callback' => 'tripal_elasticsearch_table_search_page_callback',
    'access callback' => user_access('access content'),
  ];

  $items['tripal_elasticsearch/download/results'] = [
    'page callback' => 'tripal_elasticsearch_table_search_download',
    'access callback' => user_access('access content'),
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * tripal_elasticsearch_search_results_page_callback
 */
function tripal_elasticsearch_search_results_page_callback($keyword = '') {
  // $arg1 is empty by default. $arg1 has be to set, otherwise it will
  // have a argument missing error when visit page 'tripal_elasticsearch/search_website'.
  if (empty($keyword)) {
    return 'Please enter some content into the search box and click the search button.';
  }

  // Run Elasticsearch.
  try {
    $es = new ESInstance();
    $indices = $es->getIndices();
    $index_name = [];
    if (in_array('website', $indices)) {
      $index_name[] = 'website';
    }

    if (in_array('entities', $indices)) {
      $index_name[] = 'entities';
    }

    if (empty($index_name)) {
      return 'Searching is not available. Please try later.';
    }

    $results = $es->setWebsiteSearchParams($keyword, '', implode(',', $index_name), '')
                  ->search();
  } catch (\Exception $e) {
    return 'Searching is not available. Please try later.';
  }

  if (count($results) == 0) {
    return "Your search -<b>" . $keyword . "</b>- didn't match any content.";
  }

  return get_website_search_result_table($results);
}

/**
 * tripal_elasticsearch_search_results_category_page_callback
 */

function tripal_elasticsearch_search_results_category_page_callback($node_type, $keyword) {
  // Run Elasticsearch.
  try {
    $es = new ESInstance();
    $search_results = $es->setWebsiteSearchParams($keyword, $node_type, 'website,entities', '')
                         ->search();
  } catch (\Exception $e) {
    return 'Searching is not available. Please try later.';
  }

  if (count($search_results) == 0) {
    return "Your search -<b>" . $keyword . "</b>- didn't match any content.";
  }

  return get_website_search_result_table($search_results);
}

/**
 * tripal_elasticsearch_table_search_page_callback
 */
function tripal_elasticsearch_table_search_page_callback() {
  // create an empty page to host table search blocks.
  return '';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tripal_elasticsearch_form_tripal_elasticsearch_build_search_block_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form_state['values']['op'])) {
    return;
  }
  elseif ($form_state['values']['op'] !== 'Download') {
    // add js and css files
    drupal_add_css(drupal_get_path('module', 'tripal_elasticsearch') . '/css/jquery.dataTables.min.css');
    drupal_add_js(drupal_get_path('module', 'tripal_elasticsearch') . '/js/jquery.dataTables.min.js');
    drupal_add_js(drupal_get_path('module', 'tripal_elasticsearch') . '/js/table_search_results_datatable.js');

    /**
     * build an associated array in which keys are field names and values are user input contents.
     */
    $sql = "SELECT * FROM {tripal_elasticsearch} WHERE index_name = :index_name";
    $index_name = $form_state['values']['index_name'];
    $result = db_query($sql, [':index_name' => $index_name])->fetchAll();
    $index_fields = [];
    foreach ($result as $record) {
      $field_value = isset($form_state['values'][$record->index_field]) ? $form_state['values'][$record->index_field] : '';
      if (!empty($field_value)) {
        $index_fields[$record->index_field] = $field_value;
      }
    }
    $record = end($results);
    // get index type
    $index_type = $record->table_name;
    // Build search query for table search.
    $query = build_search_query_from_field_content_pairs($index_fields);
    // Build table search params.
    $select_window = isset($form_state['values']['select_window']) ? $form_state['values']['select_window'] : '';
    $from = empty($select_window) ? 0 : 1000 * ($select_window - 1);
    // Run Elasticsearch and return search results into an array.
    $results = [];
    try {
      $es = new ESInstance();
      $results = $es->setTableSearchParams($index_name, $index_type, $query, [
        $from,
        1000,
      ])->search();
    } catch (\Exception $e) {
      tripal_report_error('tripal_elasticsearch', 'TRIPAL_ERROR', $e->getMessage());
    }

    // Theme search results
    $output = '<strong style="color: blue">Your search did not match any record</strong>';
    $total = count($results);
    if ($total > 0) {
      $output = '<div id="table_search_results_datatable">';
      $output .= get_table_search_result_table($results, $index_name, $total);
      $output .= '</div>';
    }

    // A markup element to display search results.
    $form['actions']['download'] = [
      '#type' => 'submit',
      '#value' => t('Download Table'),
      '#weight' => 101,
    ];

    $form['search_results'] = [
      '#item' => 'markup',
      '#markup' => $output,
      '#prefix' => '<div id="search_results_ajax_wrapper">',
      '#suffix' => '</div>',
      '#weight' => 101,
    ];
  }
}

/**
 * Implements hook_node_update().
 */
function tripal_elasticsearch_node_update($node) {
  $item = new stdClass();

  $item->index_name = 'website';
  $item->index_type = 'website';
  $item->website_or_table = 'website';
  $item->sql = "SELECT nid,title,type FROM {node} WHERE nid = $node->nid";
  $item->field_mapping_types = [
    'nid' => 'integer',
    'type' => 'string',
    'title' => 'string',
    'content' => 'string',
  ];

  // randomly assign the updated node to a cron queue
  $id = rand(1, 10);
  $cron_queue = DrupalQueue::get('elasticsearch_queue_' . $id);
  $cron_queue->createItem($item);
}

/**
 * Implements hook_node_insert()
 */
function tripal_elasticsearch_node_insert($node) {
  $item = new stdClass();

  $item->index_name = 'website';
  $item->index_type = 'website';
  $item->website_or_table = 'website';
  $item->sql = "SELECT nid,title,type FROM {node} WHERE nid = $node->nid";
  $item->field_mapping_types = [
    'nid' => 'integer',
    'type' => 'string',
    'title' => 'string',
    'content' => 'string',
  ];

  // randomly assign the updated node to a cron queue
  $id = rand(1, 10);
  $cron_queue = DrupalQueue::get('elasticsearch_queue_' . $id);
  $cron_queue->createItem($item);
}

/**
 * Implements hook_node_delete().
 */
function tripal_elasticsearch_node_delete($node) {
  try {
    $es = new ESInstance();
    $es->deleteEntry('website', 'website', $node->id);
    $message = 'Removed document ' . $node->nid . 'from index "website"';
    watchdog('tripal_elasticsearch', $message);
  } catch (\Exception $e) {
    $message = $e->getMessage() . ' Failed to delete indexed node ' . $node->nid;
    watchdog('tripal_elasticsearch', $message, WATCHDOG_WARNING);
  }
}

/**
 * Paginate results.
 *
 * @param $per_page
 *
 * @return array
 */
function tripal_elasticsearch_paginate($per_page) {
  if (!isset($_GET['index_name'])) {
    return [];
  }

  // parameters from get
  $index_name = $_GET['index_name'];

  // Build an associated array in which keys are field names and values are user input contents.
  $sql = "SELECT * FROM {tripal_elasticsearch} WHERE index_name = :index_name";
  $result = db_query($sql, [':index_name' => $index_name])->fetchAll();

  $index_fields = [];
  foreach ($result as $record) {
    $field_value = isset($_GET[$record->index_field]) ? $_GET[$record->index_field] : '';
    if (!empty($field_value)) {
      $index_fields[$record->index_field] = $field_value;
    }
  }

  $record = end($result);

  // Get index type
  $index_type = $record->table_name;

  // Build search query for table search.
  $query = build_search_query_from_field_content_pairs($index_fields);

  // Run Elasticsearch and return search results into an array.
  try {
    $es = new ESInstance();
    return $es->setTableSearchParams($index_name, $index_type, $query)
              ->paginate($per_page);
  } catch (\Exception $e) {
    return [];
  }
}

/**
 * Download results.
 *
 * @return void
 */
function tripal_elasticsearch_table_search_download() {
  // Build an associated array in which keys are field names and values are user input contents.
  if (!isset($_GET['index_name'])) {
    drupal_not_found();
    return;
  }

  $index_name = $_GET['index_name'];

  $sql = "SELECT * FROM {tripal_elasticsearch} WHERE index_name = :index_name";
  $result = db_query($sql, [':index_name' => $index_name])->fetchAll();
  $index_fields = [];
  foreach ($result as $record) {
    $field_value = isset($_GET[$record->index_field]) ? $_GET[$record->index_field] : '';
    if (!empty($field_value)) {
      $index_fields[$record->index_field] = $field_value;
    }
  }

  $record = end($result);
  // get index type
  $index_type = $record->table_name;

  // Build search query for table search.
  $query = build_search_query_from_field_content_pairs($index_fields);

  // loop through window and write returned search results into a file.
  $directory = 'public://table_search_results';
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
  $temp_file = drupal_tempnam($directory, 'search_results_') . '.csv';

  try {
    $es = new ESInstance();
    $count = $es->setTableSearchParams($index_name, $index_type, $query)
                ->count();
    $window_range = range(1, ceil($count / 1000));
  } catch (Exception $exception) {
    tripal_report_error('tripal_elasticsearch', 'TRIPAL_ERROR', $exception->getMessage());
    return;
  }

  foreach ($window_range as $window) {
    $offset = [1000 * ($window - 1), 1000];

    $result = $es->setTableSearchParams($index_name, $index_type, $query, $offset)
                 ->search();

    foreach ($result as $row) {
      $line = implode(',', $row) . "\n";
      file_put_contents($temp_file, $line, FILE_APPEND);
    }

    file_transfer($temp_file, ['Content-Type' => 'text/csv; utf-8']);
  }
}