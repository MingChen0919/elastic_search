<?php

  require_once drupal_get_path('module', 'tripal_elasticsearch').'/vendor/autoload.php';
  require_once drupal_get_path('module', 'tripal_elasticsearch').'/api/tripal_elasticsearch.api.php';
  require_once drupal_get_path('module', 'tripal_elasticsearch').'/includes/tripal_elasticsearch_main_search_box_form.inc';
  require_once drupal_get_path('module', 'tripal_elasticsearch').'/includes/tripal_elasticsearch_main_search_box_form.inc';


set_time_limit(0);

/**
 * Implementation of hook_menu().
 */
function tripal_elasticsearch_menu(){
  //$pre = 'admin/config/search/elastic_search';
  $pre = 'admin/tripal/extension/tripal_elasticsearch';
  $items[$pre] = array(
    'title' => 'Tripal Elasticsearch',
    'description' => 'Configure elastic indexing and build search interface',
    'page callback' => 'drupal_goto',
    'page arguments' => array($pre . '/tripal_elasticsearch_indexing'),
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
  );


  $items[$pre.'/tripal_elasticsearch_indexing'] = array(
    'title' => t('Indexing'),
    'page callback' => 'tripal_elasticsearch_indexing_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_elasticsearch_indexing_form.inc',
    'weight' => 0,
    );
  $items[$pre.'/delete_tripal_elasticsearch_indices'] = array(
    'title' => t('Delete indices'),
    'page callback' => 'delete_tripal_elasticsearch_indices_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/delete_tripal_elasticsearch_indices_form.inc',
    'weight' => 1,
  );
  $items[$pre.'/build_tripal_elasticsearch_block'] = array(
    'title' => t('Build tripal_elasticsearch block'),
    'page callback' => 'build_tripal_elasticelastic_block_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/build_tripal_elasticsearch_block_form.inc',
    'weight' => 2,
  );

  $items[$pre.'/delete_tripal_elasticsearch_blocks'] = array(
    'title' => t('Delete tripal_elasticsearch blocks'),
    'page callback' => 'delete_tripal_elasticsearch_blocks_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/delete_tripal_elasticsearch_blocks_form.inc',
    'weight' => 3,
  );
  $items[$pre.'/tripal_elasticsearch_add_links'] = array(
    'title' => t('Add page links'),
    'page callback' => 'tripal_elasticsearch_add_links_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_elasticsearch_add_links_form.inc',
    'weight' => 4,
  );
  $items[$pre.'/tripal_elasticsearch_alter_form'] = array(
    'title' => t('Alter form fields'),
    'page callback' => 'tripal_elasticsearch_alter_form_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_elasticsearch_alter_form.inc',
    'weight' => 4,
  );

  $items['elastic_search'] = array(
    'title' => '', 
    'page callback' => 'tripal_elasticsearch_page',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tripal_elasticsearch_blocks_form.inc',
  );
  $items['elastic_search/organism/%'] = array(
    'title' => '', // t('Elasticsearch'),
    'page callback' => 'tripal_elasticsearch_page',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tripal_elasticsearch_blocks_form.inc',
  );
  $items['search-website'] = array(
    'title' => '',
    'page callback' => 'tripal_elasticsearch_main_search_page',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tripal_elasticsearch_main_search_box_form.inc',
  );

  return $items;
}


function tripal_elasticsearch_indexing_page(){
  return drupal_get_form('tripal_elasticsearch_indexing_form');
}

function delete_tripal_elasticsearch_indices_page(){
  return drupal_get_form('delete_tripal_elasticsearch_indices_form');
}


function build_tripal_elasticelastic_block_page(){
  return drupal_get_form('build_tripal_elasticsearch_block_form');
}

function delete_tripal_elasticsearch_blocks_page(){
  return drupal_get_form('delete_tripal_elasticsearch_blocks_form');
}

function tripal_elasticsearch_add_links_page(){
  $example_form = drupal_get_form('tripal_elasticsearch_add_links_example_form');
  $form = drupal_get_form('tripal_elasticsearch_add_links_form');
  $output = drupal_render($example_form).drupal_render($form);
  return $output;
}

function tripal_elasticsearch_alter_form_page(){
  return drupal_get_form('tripal_elasticsearch_alter_form');
}

/*
 * Create an empty page for hosting tripal_elasticsearch blocks
 * These blocks are configurable and can be placed anywhere else.
 */
function tripal_elasticsearch_page(){
  return '';
}

/*
 * Create an empty page for site wide searching results.
 */
function tripal_elasticsearch_main_search_page(){
  return '';
}

/**
 * Implements hook_block_info().
 */
function tripal_elasticsearch_block_info(){
  $blocks = array();
  // Block for main search box.
  $blocks['main_search_box'] = array(
    'info' => t('tripal_elasticsearch main search box'),
    'status' => TRUE,
    'region' => 'header',
    'cache' => DRUPAL_NO_CACHE,
    'weight' => -99,
  );
  // Block for main search results
  $blocks['main_search_results'] = array(
    'info' => t('tripal_elasticsearch main search results'),
    'status' => TRUE,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "search-website",
    'cache' => DRUPAL_NO_CACHE,
  );

  $result = db_query('SELECT DISTINCT(table_name) FROM tripal_elasticsearch');
  foreach($result as $record){
    // For some reason, block name cannot be longer than 32 chars
    $block_name_form = 'Search: '.$record->table_name;
    $blocks[$block_name_form] = array(
      'info' => t('tripal_elasticsearch block for search form: '.$record->table_name),
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => "elastic_search\nelastic_search/*",
      'cache' => DRUPAL_NO_CACHE,
    );
    $block_name_hits = 'Hits: '.$record->table_name;
    $blocks[$block_name_hits] = array(
      'info' => t('tripal_elasticsearch block for search results: '.$record->table_name),
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => "elastic_search\nelastic_search/*",
      'cache' => DRUPAL_NO_CACHE,
    );
  }

    return $blocks;
}


/**
 * Implements hook_block_view().
 */
function tripal_elasticsearch_block_view($delta = ''){

  $block = array();
  $result = db_query('SELECT DISTINCT(table_name) FROM tripal_elasticsearch');
  $table_names = array();
  foreach($result as $record){
    $table_names[] = $record->table_name;
  }
  // strip off 'ES_form' or 'ES_hits' to get table name
  //$table = substr($delta, 14);
  $table = str_replace('Search: ', '', $delta);
  $table = str_replace('Hits: ', '', $table);

  if(in_array($table, $table_names)){
    $form = 'Search: '.$table;
    $hits = 'Hits: '.$table;

    // Get search hits
    $form_input = isset($_SESSION['elastic_form_input'])?$_SESSION['elastic_form_input']:null;
    if(!empty($form_input)){
      $index_table = _get_field_keyword_pairs($form_input)['table'];
      $field_keyword_pairs = _get_field_keyword_pairs($form_input)['field_keyword_pairs'];
      $search_from = _get_field_keyword_pairs($form_input)['search_from'];
      $search_from = intval($search_from);

      //$search_from = !empty($search_from)?$search_from:0;
      // Only display the results block for the corresponding form block
      if($table == $index_table and is_elastic_index($index_table)){
        $search_hits = _run_elastic_search($table, $field_keyword_pairs, $from=$search_from)['search_hits'];
        $search_hits_count = _run_elastic_search($table, $field_keyword_pairs)['search_hits_count'];
        $search_hits_count_html = '<h6><span style="color:red"><em>'.$search_hits_count.
                                  '</em></span> records were found. ';
        $start = strval($search_from) + 1;
        if($start+999>$search_hits_count){
          $end = $search_hits_count;
        }
        else{
          $end = $start + 999;
        }
        $search_hits_count_html .= 'Records from '.
                                   '<span style="color:red"><em>'.$start.'</em></span>'.
                                   ' to '.
                                   '<span style="color:red"><em>'.$end.'</em></span>'.
                                   ' are displayed.</h6>';
        if(!empty($search_hits)){
          $search_hits_table = get_search_hits_table($search_hits, $table);
          $search_hits_table = $search_hits_count_html.$search_hits_table;
        }
        else{
          $search_hits_table = '<font color="red">No records were found. Or the offset number was larger than the total search hits</font>';
        }
      }
      else{
        $search_hits_table = '';
      }
    }// ======= End of getting search hits=================
    switch($delta){
      case $form:
        $block['subject'] = $form;
        $block['content'] = drupal_get_form('tripal_elasticsearch_blocks_form', $table);
        break;
      case $hits:
        $block['subject'] = $hits;
        $block['content'] = !empty($search_hits_table)?$search_hits_table:'';
        break;
    }
  }
  else{ // display the main search box block
    switch($delta){
      case 'main_search_box':
        $block['subject'] = '';
        $block['content'] = drupal_get_form('main_search_box_form');
        break;
      case 'main_search_results':
        $main_search_keyword = isset($_SESSION['main_search_keyword'])?$_SESSION['main_search_keyword']:'';

        $table = 'index_website';
        $field_keyword_pairs = array('node_content'=>$main_search_keyword);
        if(!empty($main_search_keyword)){
          $main_search_hits = _run_elastic_main_search($table, $field_keyword_pairs)['main_search_hits'];
          if(!empty($main_search_hits)){
            $main_search_hits_count = _run_elastic_main_search($table, $field_keyword_pairs)['search_hits_count'];
            $main_search_hits_table = get_main_search_hits_table($main_search_hits, $main_search_hits_count);
          }
          else{
            $main_search_hits_table = '<h2><font color="red">No records were found.</font></h2>';
          }
        }
        else{
          $main_search_hits_table = '';
        }
        $block['subject'] = '';
        $block['content'] = $main_search_hits_table;
    }
  }


  drupal_add_js(drupal_get_path('module', 'tripal_elasticsearch').'/js/hit_description.js');

  return $block;
}




/**
 * implement hook_cron_queue_info()
 */
function tripal_elasticsearch_cron_queue_info(){
  // Define N=10 queues
  $queue_N = 10;
  for($n = 0; $n < $queue_N; $n++){
    $queues['elastic_queue_'.$n] = array(
      'worker callback' => 'elasticindexing_queue_item',
      //'time' => 60 * 60 * 2,  ## the amount of time drupal spends on calling the worker function.
      'time' => 30,
    );
  }

  return $queues;
}


/**
 * queue worker function
 */
function elasticindexing_queue_item($item){
  $client = new Elasticsearch\Client(variable_get('elasticsearch_hosts', array()));

  $selected_table = $item->selected_table;

  $index = str_replace('chado.', '', $selected_table);
  $sql = $item->sql;
  $result = db_query($sql);

  $mappings = $client->indices()->getMapping();
  $indices = array_keys($mappings);

  if($selected_table == 'index_website'){
    // INDEX THE ENTIRE WEBSITE
      if(!in_array($index, $indices)){
          foreach($result as $record){
                $doc = objectToArray($record);

          $properties['node_title'] = array('type' => 'string', 'analyzer' => $index);
          $properties['node_id'] = array('type' => 'string', 'analyzer' => $index);
          $properties['node_content'] = array('type' => 'string', 'analyzer' => $index);

          $mappings = array(
              '_default_' => array('properties' => $properties),
          );


                $params = array();
                $params = [
                    'index' => $index,
                    'body' => [
                        'settings' => [
                            'number_of_shards' => 1,
                            'number_of_replicas' => 0,
                            'analysis' => [
                                'filter' => [
                                    'myTokenFilter1' => [
                                        'type' => 'word_delimiter',
                    'split_on_numerics' => 'false'
                                    ]
                                ],
                                'char_filter' => [
                                    'my_html' => [
                                        'type' => 'html_strip',
                                    ]
                                ],
                                'analyzer' => [
                                    $index => [
                                        'type' => 'custom',
                                        'tokenizer' => 'standard',
                                        'char_filter' => ['my_html'],
                                        'filter' => ['myTokenFilter1', 'lowercase']
                                    ]
                                ]
                            ]
                        ],
                        'mappings' => $mappings
                    ]
                ];

                $client->indices()->create($params);
                break;
            }

        }
        foreach($result as $record){
            $doc = objectToArray($record);
            $params = array();
            $params['index'] = $index;
            $params['type'] = str_replace('chado.', '', $selected_table);

            $body['node_id'] = $doc['nid'];
            $body['node_title'] = $doc['title'];

            $node = node_load($doc['nid']);
            $node_element = node_view($node);
            $node_html = drupal_render_children($node_element);
            // combine the title and content so that searching the content will also searching the title.
            $body['node_content'] = $doc['title'].strip_tags($node_html);
            //$node_string = $body;

            //$params['body'] = array('node_content' => $node_string);
            $params['body'] = $body;
            // use node ID as the document ID.
            $params['id'] = $doc['nid'];
            $client->index($params);

        } // end foreach($result as $record)

        watchdog('elastic_search cron queue', 'Queue "elastic_queue" processed item at time '. format_date(time()));

    } // end if($selected_table == 'index_website')
    else {  // index a selected table

        if(!in_array($index, $indices)){
            foreach($result as $record){
                $doc = objectToArray($record);

                $properties = array();
                foreach(array_keys($doc) as $field) {
                    //$field = array('type' => 'string', 'analyzer' => $index);
                    $properties[$field] = array('type' => 'string', 'analyzer' => $index);
                }
                $mappings = array(
                    '_default_' => array('properties' => $properties),
                );


                $params = array();
                $params = [
                    'index' => $index,
                    'body' => [
                        'settings' => [
                            'number_of_shards' => 1,
                            'number_of_replicas' => 0,
                            'analysis' => [
                                'filter' => [
                                    'myTokenFilter1' => [
                                        'type' => 'word_delimiter',
                    'split_on_numerics' => 'false'
                                    ]
                                ],
                                'char_filter' => [
                                    'my_html' => [
                                        'type' => 'html_strip',
                                    ]
                                ],
                                'analyzer' => [
                                    $index => [
                                        'type' => 'custom',
                                        'tokenizer' => 'standard',
                                        'char_filter' => ['my_html'],
                                        'filter' => ['myTokenFilter1', 'lowercase']
                                    ]
                                ]
                            ]
                        ],
                        'mappings' => $mappings
                    ]
                ];

                $client->indices()->create($params);
                break;
            }
    }

        foreach($result as $record){
            $doc = objectToArray($record);

            $params = array();
            $params['index'] = $index;
            $params['type'] = str_replace('chado.', '', $selected_table);
            $params['body'] = $doc;

            $client->index($params);
        }

        watchdog('elastic_search cron queue', 'Queue "elastic_queue" processed item at time '. format_date(time()));

  }

}




/**
 * implements hook_node_update().
 * Any node updates will also update the corresponding elasticsearch docs.
 */
function tripal_elasticsearch_node_update($node){
  $queue_N = 10;
  // randomly assign the updated node to a queue
  $n = rand(0, $queue_N-1);
  $queue = DrupalQueue::get('elastic_queue_'.$n);
  $nid = $node->nid;
  $sql = "SELECT title, nid FROM node WHERE nid=$nid ;";
  $item = new stdClass();
  $item->sql = $sql;
  $item->selected_table = 'index_website';
  $queue->createItem($item);
}

/**
 * implements hook_node_insert().
 * Any new nodes will be added to the  elasticsearch cron queue.
 */
function tripal_elasticsearch_node_insert($node){
  $queue_N = 10;
  // randomly assign the inserted node to a queue
  $n = rand(0, $queue_N-1);
  $queue = DrupalQueue::get('elastic_queue_'.$n);
  $nid = $node->nid;
  $sql = "SELECT title, nid FROM node WHERE nid=$nid ;";
  $item = new stdClass();
  $item->sql = $sql;
  $item->selected_table = 'index_website';
  $queue->createItem($item);
}


/**
 * Implements hook_node_delete().
 * the indexed doc for the deleted node will be also deleted in elasticsearch
 */
function tripal_elasticsearch_node_delete($node){
  $nid = $node->nid;
  $params = array();
  $params = [
    'index' => 'index_website',
    'type' => 'index_website',
    'id' => $nid,
    'body' => ['fake_field' => 'fake document']
  ];
  // create a fake document and index it in case that the node
  // that is being deleted doesn't exit in elasticsearch
  $client = new Elasticsearch\Client(variable_get('elasticsearch_hosts', array()));
  $client->index($params);


  $params = array();
  $params = [
    'index' => 'index_website',
    'type' => 'index_website',
    'id' => $nid,
  ];
  $client->delete($params);
}



